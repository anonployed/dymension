// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/lockup/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ModuleBalanceRequest struct {
}

func (m *ModuleBalanceRequest) Reset()         { *m = ModuleBalanceRequest{} }
func (m *ModuleBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceRequest) ProtoMessage()    {}
func (*ModuleBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{0}
}
func (m *ModuleBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceRequest.Merge(m, src)
}
func (m *ModuleBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceRequest proto.InternalMessageInfo

type ModuleBalanceResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ModuleBalanceResponse) Reset()         { *m = ModuleBalanceResponse{} }
func (m *ModuleBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*ModuleBalanceResponse) ProtoMessage()    {}
func (*ModuleBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{1}
}
func (m *ModuleBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleBalanceResponse.Merge(m, src)
}
func (m *ModuleBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModuleBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleBalanceResponse proto.InternalMessageInfo

func (m *ModuleBalanceResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type ModuleLockedAmountRequest struct {
}

func (m *ModuleLockedAmountRequest) Reset()         { *m = ModuleLockedAmountRequest{} }
func (m *ModuleLockedAmountRequest) String() string { return proto.CompactTextString(m) }
func (*ModuleLockedAmountRequest) ProtoMessage()    {}
func (*ModuleLockedAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{2}
}
func (m *ModuleLockedAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLockedAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLockedAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLockedAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLockedAmountRequest.Merge(m, src)
}
func (m *ModuleLockedAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLockedAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLockedAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLockedAmountRequest proto.InternalMessageInfo

type ModuleLockedAmountResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *ModuleLockedAmountResponse) Reset()         { *m = ModuleLockedAmountResponse{} }
func (m *ModuleLockedAmountResponse) String() string { return proto.CompactTextString(m) }
func (*ModuleLockedAmountResponse) ProtoMessage()    {}
func (*ModuleLockedAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{3}
}
func (m *ModuleLockedAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleLockedAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleLockedAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ModuleLockedAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleLockedAmountResponse.Merge(m, src)
}
func (m *ModuleLockedAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ModuleLockedAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleLockedAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleLockedAmountResponse proto.InternalMessageInfo

func (m *ModuleLockedAmountResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountUnlockableCoinsRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *AccountUnlockableCoinsRequest) Reset()         { *m = AccountUnlockableCoinsRequest{} }
func (m *AccountUnlockableCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockableCoinsRequest) ProtoMessage()    {}
func (*AccountUnlockableCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{4}
}
func (m *AccountUnlockableCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockableCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockableCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockableCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockableCoinsRequest.Merge(m, src)
}
func (m *AccountUnlockableCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockableCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockableCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockableCoinsRequest proto.InternalMessageInfo

func (m *AccountUnlockableCoinsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AccountUnlockableCoinsResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountUnlockableCoinsResponse) Reset()         { *m = AccountUnlockableCoinsResponse{} }
func (m *AccountUnlockableCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockableCoinsResponse) ProtoMessage()    {}
func (*AccountUnlockableCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{5}
}
func (m *AccountUnlockableCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockableCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockableCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockableCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockableCoinsResponse.Merge(m, src)
}
func (m *AccountUnlockableCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockableCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockableCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockableCoinsResponse proto.InternalMessageInfo

func (m *AccountUnlockableCoinsResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountUnlockingCoinsRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *AccountUnlockingCoinsRequest) Reset()         { *m = AccountUnlockingCoinsRequest{} }
func (m *AccountUnlockingCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockingCoinsRequest) ProtoMessage()    {}
func (*AccountUnlockingCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{6}
}
func (m *AccountUnlockingCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockingCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockingCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockingCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockingCoinsRequest.Merge(m, src)
}
func (m *AccountUnlockingCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockingCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockingCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockingCoinsRequest proto.InternalMessageInfo

func (m *AccountUnlockingCoinsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AccountUnlockingCoinsResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountUnlockingCoinsResponse) Reset()         { *m = AccountUnlockingCoinsResponse{} }
func (m *AccountUnlockingCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockingCoinsResponse) ProtoMessage()    {}
func (*AccountUnlockingCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{7}
}
func (m *AccountUnlockingCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockingCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockingCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockingCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockingCoinsResponse.Merge(m, src)
}
func (m *AccountUnlockingCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockingCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockingCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockingCoinsResponse proto.InternalMessageInfo

func (m *AccountUnlockingCoinsResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountLockedCoinsRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
}

func (m *AccountLockedCoinsRequest) Reset()         { *m = AccountLockedCoinsRequest{} }
func (m *AccountLockedCoinsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedCoinsRequest) ProtoMessage()    {}
func (*AccountLockedCoinsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{8}
}
func (m *AccountLockedCoinsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedCoinsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedCoinsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedCoinsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedCoinsRequest.Merge(m, src)
}
func (m *AccountLockedCoinsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedCoinsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedCoinsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedCoinsRequest proto.InternalMessageInfo

func (m *AccountLockedCoinsRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type AccountLockedCoinsResponse struct {
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins"`
}

func (m *AccountLockedCoinsResponse) Reset()         { *m = AccountLockedCoinsResponse{} }
func (m *AccountLockedCoinsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedCoinsResponse) ProtoMessage()    {}
func (*AccountLockedCoinsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{9}
}
func (m *AccountLockedCoinsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedCoinsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedCoinsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedCoinsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedCoinsResponse.Merge(m, src)
}
func (m *AccountLockedCoinsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedCoinsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedCoinsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedCoinsResponse proto.InternalMessageInfo

func (m *AccountLockedCoinsResponse) GetCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Coins
	}
	return nil
}

type AccountLockedPastTimeRequest struct {
	Owner     string    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *AccountLockedPastTimeRequest) Reset()         { *m = AccountLockedPastTimeRequest{} }
func (m *AccountLockedPastTimeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeRequest) ProtoMessage()    {}
func (*AccountLockedPastTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{10}
}
func (m *AccountLockedPastTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeRequest.Merge(m, src)
}
func (m *AccountLockedPastTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeRequest proto.InternalMessageInfo

func (m *AccountLockedPastTimeRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedPastTimeRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type AccountLockedPastTimeResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedPastTimeResponse) Reset()         { *m = AccountLockedPastTimeResponse{} }
func (m *AccountLockedPastTimeResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeResponse) ProtoMessage()    {}
func (*AccountLockedPastTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{11}
}
func (m *AccountLockedPastTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeResponse.Merge(m, src)
}
func (m *AccountLockedPastTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeResponse proto.InternalMessageInfo

func (m *AccountLockedPastTimeResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedPastTimeNotUnlockingOnlyRequest struct {
	Owner     string    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) Reset() {
	*m = AccountLockedPastTimeNotUnlockingOnlyRequest{}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) String() string {
	return proto.CompactTextString(m)
}
func (*AccountLockedPastTimeNotUnlockingOnlyRequest) ProtoMessage() {}
func (*AccountLockedPastTimeNotUnlockingOnlyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{12}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyRequest.Merge(m, src)
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyRequest proto.InternalMessageInfo

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type AccountLockedPastTimeNotUnlockingOnlyResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) Reset() {
	*m = AccountLockedPastTimeNotUnlockingOnlyResponse{}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*AccountLockedPastTimeNotUnlockingOnlyResponse) ProtoMessage() {}
func (*AccountLockedPastTimeNotUnlockingOnlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{13}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyResponse.Merge(m, src)
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeNotUnlockingOnlyResponse proto.InternalMessageInfo

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountUnlockedBeforeTimeRequest struct {
	Owner     string    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
}

func (m *AccountUnlockedBeforeTimeRequest) Reset()         { *m = AccountUnlockedBeforeTimeRequest{} }
func (m *AccountUnlockedBeforeTimeRequest) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockedBeforeTimeRequest) ProtoMessage()    {}
func (*AccountUnlockedBeforeTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{14}
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockedBeforeTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockedBeforeTimeRequest.Merge(m, src)
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockedBeforeTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockedBeforeTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockedBeforeTimeRequest proto.InternalMessageInfo

func (m *AccountUnlockedBeforeTimeRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountUnlockedBeforeTimeRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type AccountUnlockedBeforeTimeResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountUnlockedBeforeTimeResponse) Reset()         { *m = AccountUnlockedBeforeTimeResponse{} }
func (m *AccountUnlockedBeforeTimeResponse) String() string { return proto.CompactTextString(m) }
func (*AccountUnlockedBeforeTimeResponse) ProtoMessage()    {}
func (*AccountUnlockedBeforeTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{15}
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountUnlockedBeforeTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountUnlockedBeforeTimeResponse.Merge(m, src)
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountUnlockedBeforeTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountUnlockedBeforeTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountUnlockedBeforeTimeResponse proto.InternalMessageInfo

func (m *AccountUnlockedBeforeTimeResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedPastTimeDenomRequest struct {
	Owner     string    `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Timestamp time.Time `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp" yaml:"timestamp"`
	Denom     string    `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AccountLockedPastTimeDenomRequest) Reset()         { *m = AccountLockedPastTimeDenomRequest{} }
func (m *AccountLockedPastTimeDenomRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeDenomRequest) ProtoMessage()    {}
func (*AccountLockedPastTimeDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{16}
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeDenomRequest.Merge(m, src)
}
func (m *AccountLockedPastTimeDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeDenomRequest proto.InternalMessageInfo

func (m *AccountLockedPastTimeDenomRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedPastTimeDenomRequest) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *AccountLockedPastTimeDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AccountLockedPastTimeDenomResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedPastTimeDenomResponse) Reset()         { *m = AccountLockedPastTimeDenomResponse{} }
func (m *AccountLockedPastTimeDenomResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedPastTimeDenomResponse) ProtoMessage()    {}
func (*AccountLockedPastTimeDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{17}
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedPastTimeDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedPastTimeDenomResponse.Merge(m, src)
}
func (m *AccountLockedPastTimeDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedPastTimeDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedPastTimeDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedPastTimeDenomResponse proto.InternalMessageInfo

func (m *AccountLockedPastTimeDenomResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type LockedDenomRequest struct {
	Denom    string        `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration" yaml:"duration"`
}

func (m *LockedDenomRequest) Reset()         { *m = LockedDenomRequest{} }
func (m *LockedDenomRequest) String() string { return proto.CompactTextString(m) }
func (*LockedDenomRequest) ProtoMessage()    {}
func (*LockedDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{18}
}
func (m *LockedDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDenomRequest.Merge(m, src)
}
func (m *LockedDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockedDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDenomRequest proto.InternalMessageInfo

func (m *LockedDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *LockedDenomRequest) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type LockedDenomResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *LockedDenomResponse) Reset()         { *m = LockedDenomResponse{} }
func (m *LockedDenomResponse) String() string { return proto.CompactTextString(m) }
func (*LockedDenomResponse) ProtoMessage()    {}
func (*LockedDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{19}
}
func (m *LockedDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedDenomResponse.Merge(m, src)
}
func (m *LockedDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockedDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockedDenomResponse proto.InternalMessageInfo

type LockedRequest struct {
	LockId uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *LockedRequest) Reset()         { *m = LockedRequest{} }
func (m *LockedRequest) String() string { return proto.CompactTextString(m) }
func (*LockedRequest) ProtoMessage()    {}
func (*LockedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{20}
}
func (m *LockedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedRequest.Merge(m, src)
}
func (m *LockedRequest) XXX_Size() int {
	return m.Size()
}
func (m *LockedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LockedRequest proto.InternalMessageInfo

func (m *LockedRequest) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type LockedResponse struct {
	Lock *PeriodLock `protobuf:"bytes,1,opt,name=lock,proto3" json:"lock,omitempty"`
}

func (m *LockedResponse) Reset()         { *m = LockedResponse{} }
func (m *LockedResponse) String() string { return proto.CompactTextString(m) }
func (*LockedResponse) ProtoMessage()    {}
func (*LockedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{21}
}
func (m *LockedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockedResponse.Merge(m, src)
}
func (m *LockedResponse) XXX_Size() int {
	return m.Size()
}
func (m *LockedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LockedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LockedResponse proto.InternalMessageInfo

func (m *LockedResponse) GetLock() *PeriodLock {
	if m != nil {
		return m.Lock
	}
	return nil
}

type NextLockIDRequest struct {
}

func (m *NextLockIDRequest) Reset()         { *m = NextLockIDRequest{} }
func (m *NextLockIDRequest) String() string { return proto.CompactTextString(m) }
func (*NextLockIDRequest) ProtoMessage()    {}
func (*NextLockIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{22}
}
func (m *NextLockIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextLockIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextLockIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextLockIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextLockIDRequest.Merge(m, src)
}
func (m *NextLockIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *NextLockIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextLockIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextLockIDRequest proto.InternalMessageInfo

type NextLockIDResponse struct {
	LockId uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *NextLockIDResponse) Reset()         { *m = NextLockIDResponse{} }
func (m *NextLockIDResponse) String() string { return proto.CompactTextString(m) }
func (*NextLockIDResponse) ProtoMessage()    {}
func (*NextLockIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{23}
}
func (m *NextLockIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextLockIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextLockIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextLockIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextLockIDResponse.Merge(m, src)
}
func (m *NextLockIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *NextLockIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NextLockIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NextLockIDResponse proto.InternalMessageInfo

func (m *NextLockIDResponse) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type AccountLockedLongerDurationRequest struct {
	Owner    string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration" yaml:"duration"`
}

func (m *AccountLockedLongerDurationRequest) Reset()         { *m = AccountLockedLongerDurationRequest{} }
func (m *AccountLockedLongerDurationRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationRequest) ProtoMessage()    {}
func (*AccountLockedLongerDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{24}
}
func (m *AccountLockedLongerDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationRequest.Merge(m, src)
}
func (m *AccountLockedLongerDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationRequest proto.InternalMessageInfo

func (m *AccountLockedLongerDurationRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedLongerDurationRequest) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type AccountLockedLongerDurationResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedLongerDurationResponse) Reset()         { *m = AccountLockedLongerDurationResponse{} }
func (m *AccountLockedLongerDurationResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationResponse) ProtoMessage()    {}
func (*AccountLockedLongerDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{25}
}
func (m *AccountLockedLongerDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationResponse.Merge(m, src)
}
func (m *AccountLockedLongerDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationResponse proto.InternalMessageInfo

func (m *AccountLockedLongerDurationResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedDurationRequest struct {
	Owner    string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration" yaml:"duration"`
}

func (m *AccountLockedDurationRequest) Reset()         { *m = AccountLockedDurationRequest{} }
func (m *AccountLockedDurationRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedDurationRequest) ProtoMessage()    {}
func (*AccountLockedDurationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{26}
}
func (m *AccountLockedDurationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedDurationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedDurationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedDurationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedDurationRequest.Merge(m, src)
}
func (m *AccountLockedDurationRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedDurationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedDurationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedDurationRequest proto.InternalMessageInfo

func (m *AccountLockedDurationRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedDurationRequest) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type AccountLockedDurationResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedDurationResponse) Reset()         { *m = AccountLockedDurationResponse{} }
func (m *AccountLockedDurationResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedDurationResponse) ProtoMessage()    {}
func (*AccountLockedDurationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{27}
}
func (m *AccountLockedDurationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedDurationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedDurationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedDurationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedDurationResponse.Merge(m, src)
}
func (m *AccountLockedDurationResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedDurationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedDurationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedDurationResponse proto.InternalMessageInfo

func (m *AccountLockedDurationResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedLongerDurationNotUnlockingOnlyRequest struct {
	Owner    string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration" yaml:"duration"`
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) Reset() {
	*m = AccountLockedLongerDurationNotUnlockingOnlyRequest{}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) String() string {
	return proto.CompactTextString(m)
}
func (*AccountLockedLongerDurationNotUnlockingOnlyRequest) ProtoMessage() {}
func (*AccountLockedLongerDurationNotUnlockingOnlyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{28}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyRequest.Merge(m, src)
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyRequest proto.InternalMessageInfo

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

type AccountLockedLongerDurationNotUnlockingOnlyResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) Reset() {
	*m = AccountLockedLongerDurationNotUnlockingOnlyResponse{}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) String() string {
	return proto.CompactTextString(m)
}
func (*AccountLockedLongerDurationNotUnlockingOnlyResponse) ProtoMessage() {}
func (*AccountLockedLongerDurationNotUnlockingOnlyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{29}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyResponse.Merge(m, src)
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationNotUnlockingOnlyResponse proto.InternalMessageInfo

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type AccountLockedLongerDurationDenomRequest struct {
	Owner    string        `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration" yaml:"duration"`
	Denom    string        `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AccountLockedLongerDurationDenomRequest) Reset() {
	*m = AccountLockedLongerDurationDenomRequest{}
}
func (m *AccountLockedLongerDurationDenomRequest) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationDenomRequest) ProtoMessage()    {}
func (*AccountLockedLongerDurationDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{30}
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationDenomRequest.Merge(m, src)
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationDenomRequest proto.InternalMessageInfo

func (m *AccountLockedLongerDurationDenomRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *AccountLockedLongerDurationDenomRequest) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AccountLockedLongerDurationDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AccountLockedLongerDurationDenomResponse struct {
	Locks []PeriodLock `protobuf:"bytes,1,rep,name=locks,proto3" json:"locks"`
}

func (m *AccountLockedLongerDurationDenomResponse) Reset() {
	*m = AccountLockedLongerDurationDenomResponse{}
}
func (m *AccountLockedLongerDurationDenomResponse) String() string { return proto.CompactTextString(m) }
func (*AccountLockedLongerDurationDenomResponse) ProtoMessage()    {}
func (*AccountLockedLongerDurationDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{31}
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountLockedLongerDurationDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountLockedLongerDurationDenomResponse.Merge(m, src)
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *AccountLockedLongerDurationDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountLockedLongerDurationDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountLockedLongerDurationDenomResponse proto.InternalMessageInfo

func (m *AccountLockedLongerDurationDenomResponse) GetLocks() []PeriodLock {
	if m != nil {
		return m.Locks
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{32}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{33}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type DenomLockNumRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *DenomLockNumRequest) Reset()         { *m = DenomLockNumRequest{} }
func (m *DenomLockNumRequest) String() string { return proto.CompactTextString(m) }
func (*DenomLockNumRequest) ProtoMessage()    {}
func (*DenomLockNumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{34}
}
func (m *DenomLockNumRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomLockNumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomLockNumRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomLockNumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomLockNumRequest.Merge(m, src)
}
func (m *DenomLockNumRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomLockNumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomLockNumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomLockNumRequest proto.InternalMessageInfo

func (m *DenomLockNumRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type DenomLockNumResponse struct {
	LockNum uint64 `protobuf:"varint,1,opt,name=lock_num,json=lockNum,proto3" json:"lock_num,omitempty"`
}

func (m *DenomLockNumResponse) Reset()         { *m = DenomLockNumResponse{} }
func (m *DenomLockNumResponse) String() string { return proto.CompactTextString(m) }
func (*DenomLockNumResponse) ProtoMessage()    {}
func (*DenomLockNumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{35}
}
func (m *DenomLockNumResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomLockNumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomLockNumResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomLockNumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomLockNumResponse.Merge(m, src)
}
func (m *DenomLockNumResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomLockNumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomLockNumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomLockNumResponse proto.InternalMessageInfo

func (m *DenomLockNumResponse) GetLockNum() uint64 {
	if m != nil {
		return m.LockNum
	}
	return 0
}

type DenomLockNumBreakdownRequest struct {
}

func (m *DenomLockNumBreakdownRequest) Reset()         { *m = DenomLockNumBreakdownRequest{} }
func (m *DenomLockNumBreakdownRequest) String() string { return proto.CompactTextString(m) }
func (*DenomLockNumBreakdownRequest) ProtoMessage()    {}
func (*DenomLockNumBreakdownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{36}
}
func (m *DenomLockNumBreakdownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomLockNumBreakdownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomLockNumBreakdownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomLockNumBreakdownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomLockNumBreakdownRequest.Merge(m, src)
}
func (m *DenomLockNumBreakdownRequest) XXX_Size() int {
	return m.Size()
}
func (m *DenomLockNumBreakdownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomLockNumBreakdownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DenomLockNumBreakdownRequest proto.InternalMessageInfo

type DenomLockNumBreakdownResponse struct {
	Breakdown []DenomLockNum `protobuf:"bytes,1,rep,name=breakdown,proto3" json:"breakdown"`
}

func (m *DenomLockNumBreakdownResponse) Reset()         { *m = DenomLockNumBreakdownResponse{} }
func (m *DenomLockNumBreakdownResponse) String() string { return proto.CompactTextString(m) }
func (*DenomLockNumBreakdownResponse) ProtoMessage()    {}
func (*DenomLockNumBreakdownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f9aa4024c313d634, []int{37}
}
func (m *DenomLockNumBreakdownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomLockNumBreakdownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomLockNumBreakdownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomLockNumBreakdownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomLockNumBreakdownResponse.Merge(m, src)
}
func (m *DenomLockNumBreakdownResponse) XXX_Size() int {
	return m.Size()
}
func (m *DenomLockNumBreakdownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomLockNumBreakdownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DenomLockNumBreakdownResponse proto.InternalMessageInfo

func (m *DenomLockNumBreakdownResponse) GetBreakdown() []DenomLockNum {
	if m != nil {
		return m.Breakdown
	}
	return nil
}

func init() {
	proto.RegisterType((*ModuleBalanceRequest)(nil), "dymensionxyz.dymension.lockup.ModuleBalanceRequest")
	proto.RegisterType((*ModuleBalanceResponse)(nil), "dymensionxyz.dymension.lockup.ModuleBalanceResponse")
	proto.RegisterType((*ModuleLockedAmountRequest)(nil), "dymensionxyz.dymension.lockup.ModuleLockedAmountRequest")
	proto.RegisterType((*ModuleLockedAmountResponse)(nil), "dymensionxyz.dymension.lockup.ModuleLockedAmountResponse")
	proto.RegisterType((*AccountUnlockableCoinsRequest)(nil), "dymensionxyz.dymension.lockup.AccountUnlockableCoinsRequest")
	proto.RegisterType((*AccountUnlockableCoinsResponse)(nil), "dymensionxyz.dymension.lockup.AccountUnlockableCoinsResponse")
	proto.RegisterType((*AccountUnlockingCoinsRequest)(nil), "dymensionxyz.dymension.lockup.AccountUnlockingCoinsRequest")
	proto.RegisterType((*AccountUnlockingCoinsResponse)(nil), "dymensionxyz.dymension.lockup.AccountUnlockingCoinsResponse")
	proto.RegisterType((*AccountLockedCoinsRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedCoinsRequest")
	proto.RegisterType((*AccountLockedCoinsResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedCoinsResponse")
	proto.RegisterType((*AccountLockedPastTimeRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeRequest")
	proto.RegisterType((*AccountLockedPastTimeResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeResponse")
	proto.RegisterType((*AccountLockedPastTimeNotUnlockingOnlyRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeNotUnlockingOnlyRequest")
	proto.RegisterType((*AccountLockedPastTimeNotUnlockingOnlyResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeNotUnlockingOnlyResponse")
	proto.RegisterType((*AccountUnlockedBeforeTimeRequest)(nil), "dymensionxyz.dymension.lockup.AccountUnlockedBeforeTimeRequest")
	proto.RegisterType((*AccountUnlockedBeforeTimeResponse)(nil), "dymensionxyz.dymension.lockup.AccountUnlockedBeforeTimeResponse")
	proto.RegisterType((*AccountLockedPastTimeDenomRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeDenomRequest")
	proto.RegisterType((*AccountLockedPastTimeDenomResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedPastTimeDenomResponse")
	proto.RegisterType((*LockedDenomRequest)(nil), "dymensionxyz.dymension.lockup.LockedDenomRequest")
	proto.RegisterType((*LockedDenomResponse)(nil), "dymensionxyz.dymension.lockup.LockedDenomResponse")
	proto.RegisterType((*LockedRequest)(nil), "dymensionxyz.dymension.lockup.LockedRequest")
	proto.RegisterType((*LockedResponse)(nil), "dymensionxyz.dymension.lockup.LockedResponse")
	proto.RegisterType((*NextLockIDRequest)(nil), "dymensionxyz.dymension.lockup.NextLockIDRequest")
	proto.RegisterType((*NextLockIDResponse)(nil), "dymensionxyz.dymension.lockup.NextLockIDResponse")
	proto.RegisterType((*AccountLockedLongerDurationRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationRequest")
	proto.RegisterType((*AccountLockedLongerDurationResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationResponse")
	proto.RegisterType((*AccountLockedDurationRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedDurationRequest")
	proto.RegisterType((*AccountLockedDurationResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedDurationResponse")
	proto.RegisterType((*AccountLockedLongerDurationNotUnlockingOnlyRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationNotUnlockingOnlyRequest")
	proto.RegisterType((*AccountLockedLongerDurationNotUnlockingOnlyResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationNotUnlockingOnlyResponse")
	proto.RegisterType((*AccountLockedLongerDurationDenomRequest)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationDenomRequest")
	proto.RegisterType((*AccountLockedLongerDurationDenomResponse)(nil), "dymensionxyz.dymension.lockup.AccountLockedLongerDurationDenomResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "dymensionxyz.dymension.lockup.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dymensionxyz.dymension.lockup.QueryParamsResponse")
	proto.RegisterType((*DenomLockNumRequest)(nil), "dymensionxyz.dymension.lockup.DenomLockNumRequest")
	proto.RegisterType((*DenomLockNumResponse)(nil), "dymensionxyz.dymension.lockup.DenomLockNumResponse")
	proto.RegisterType((*DenomLockNumBreakdownRequest)(nil), "dymensionxyz.dymension.lockup.DenomLockNumBreakdownRequest")
	proto.RegisterType((*DenomLockNumBreakdownResponse)(nil), "dymensionxyz.dymension.lockup.DenomLockNumBreakdownResponse")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/lockup/query.proto", fileDescriptor_f9aa4024c313d634)
}

var fileDescriptor_f9aa4024c313d634 = []byte{
	// 1624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0x04, 0x92, 0x2f, 0x3c, 0xe0, 0x5b, 0x3a, 0x09, 0x34, 0x59, 0x82, 0x1d, 0xb6, 0x82,
	0x86, 0x42, 0xbc, 0x24, 0x2e, 0xea, 0x0f, 0x88, 0x42, 0x9c, 0x40, 0x1a, 0x91, 0x1f, 0x60, 0xa0,
	0x55, 0xe1, 0xe0, 0xae, 0xbd, 0x83, 0xd9, 0xc6, 0xde, 0x31, 0x5e, 0x1b, 0x62, 0x28, 0x45, 0xa2,
	0xff, 0x00, 0x52, 0x2f, 0x55, 0x0f, 0x55, 0x55, 0xa9, 0x3d, 0xf4, 0x80, 0xe8, 0x11, 0x55, 0xe2,
	0xcc, 0xa9, 0x45, 0xaa, 0x54, 0x55, 0xad, 0x14, 0xaa, 0x50, 0xf5, 0x0f, 0xa0, 0x87, 0x1e, 0x7a,
	0xa9, 0x76, 0x66, 0x76, 0xe3, 0xf5, 0x8f, 0x5d, 0xef, 0xc6, 0x89, 0x72, 0x4a, 0x76, 0x67, 0xde,
	0x7b, 0x9f, 0xcf, 0x67, 0xc6, 0xef, 0xed, 0x7b, 0x70, 0x58, 0xab, 0xe4, 0x89, 0x61, 0xea, 0xd4,
	0x58, 0xaa, 0xdc, 0x52, 0x9c, 0x07, 0x25, 0x47, 0x33, 0x8b, 0xe5, 0x82, 0x72, 0xbd, 0x4c, 0x8a,
	0x95, 0x58, 0xa1, 0x48, 0x4b, 0x14, 0xef, 0xaf, 0xde, 0x1a, 0x73, 0x1e, 0x62, 0x7c, 0xab, 0xd4,
	0x9b, 0xa5, 0x59, 0xca, 0x76, 0x2a, 0xd6, 0x7f, 0xdc, 0x48, 0x8a, 0x64, 0xa8, 0x99, 0xa7, 0xa6,
	0x92, 0x56, 0x4d, 0xa2, 0xdc, 0x18, 0x49, 0x93, 0x92, 0x3a, 0xa2, 0x64, 0xa8, 0x6e, 0x88, 0xf5,
	0x81, 0x2c, 0xa5, 0xd9, 0x1c, 0x51, 0xd4, 0x82, 0xae, 0xa8, 0x86, 0x41, 0x4b, 0x6a, 0x49, 0xa7,
	0x86, 0x29, 0x56, 0xa3, 0x62, 0x95, 0x3d, 0xa5, 0xcb, 0x57, 0x95, 0x92, 0x9e, 0x27, 0x66, 0x49,
	0xcd, 0x17, 0x6c, 0xf7, 0xb5, 0x1b, 0xb4, 0x72, 0x91, 0x79, 0x10, 0xeb, 0x43, 0xde, 0xf4, 0xac,
	0x3f, 0x62, 0xe7, 0xeb, 0xde, 0x3b, 0x0b, 0x6a, 0x51, 0xcd, 0x0b, 0x58, 0xf2, 0x5e, 0xe8, 0x9d,
	0xa3, 0x5a, 0x39, 0x47, 0x12, 0x6a, 0x4e, 0x35, 0x32, 0x24, 0x49, 0xae, 0x97, 0x89, 0x59, 0x92,
	0x6f, 0xc1, 0x9e, 0x9a, 0xf7, 0x66, 0x81, 0x1a, 0x26, 0xc1, 0x2a, 0x74, 0x59, 0x9c, 0xcd, 0x3e,
	0x34, 0xb8, 0x65, 0x68, 0xc7, 0x68, 0x7f, 0x8c, 0xab, 0x12, 0xb3, 0x54, 0x89, 0x09, 0x55, 0x62,
	0x93, 0x54, 0x37, 0x12, 0xc7, 0x9e, 0x2c, 0x47, 0x3b, 0xbe, 0x7b, 0x16, 0x1d, 0xca, 0xea, 0xa5,
	0x6b, 0xe5, 0x74, 0x2c, 0x43, 0xf3, 0x8a, 0x90, 0x90, 0xff, 0x19, 0x36, 0xb5, 0x45, 0xa5, 0x54,
	0x29, 0x10, 0x93, 0x19, 0x98, 0x49, 0xee, 0x59, 0xde, 0x07, 0xfd, 0x3c, 0xf6, 0x2c, 0xcd, 0x2c,
	0x12, 0x6d, 0x22, 0x4f, 0xcb, 0x46, 0xc9, 0x06, 0x76, 0x17, 0xa4, 0x46, 0x8b, 0x1b, 0x87, 0x6e,
	0x1a, 0xf6, 0x4f, 0x64, 0x32, 0x56, 0xd4, 0x4b, 0x86, 0xa5, 0xa8, 0x9a, 0xce, 0x11, 0xbe, 0x81,
	0x23, 0xc4, 0x87, 0xa0, 0x8b, 0xde, 0x34, 0x48, 0xb1, 0x0f, 0x0d, 0xa2, 0xa1, 0xed, 0x89, 0xdd,
	0x2f, 0x96, 0xa3, 0x3b, 0x2b, 0x6a, 0x3e, 0xf7, 0x8e, 0xcc, 0x5e, 0xcb, 0x49, 0xbe, 0x2c, 0x7f,
	0x8a, 0x20, 0xd2, 0xcc, 0xd3, 0xc6, 0xd1, 0x39, 0x03, 0x03, 0x2e, 0x10, 0xba, 0x91, 0x0d, 0xc5,
	0xe6, 0x1e, 0xaa, 0xd1, 0x65, 0xd5, 0xd1, 0xc6, 0x91, 0x99, 0x84, 0x7e, 0x81, 0x81, 0xdf, 0x8e,
	0x50, 0x4c, 0xee, 0x82, 0xd4, 0xc8, 0xc9, 0xc6, 0xb1, 0xf8, 0x12, 0x39, 0x67, 0xc2, 0x11, 0x9c,
	0x53, 0xcd, 0xd2, 0x45, 0x3d, 0x4f, 0x02, 0x32, 0xc1, 0xef, 0xc1, 0x76, 0x27, 0xcb, 0xf4, 0x75,
	0x0e, 0xa2, 0xa1, 0x1d, 0xa3, 0x52, 0x8c, 0xa7, 0x99, 0x98, 0x9d, 0x66, 0x62, 0x17, 0xed, 0x1d,
	0x89, 0x01, 0x0b, 0xf0, 0x8b, 0xe5, 0xe8, 0x6e, 0xee, 0xcb, 0x31, 0x95, 0xef, 0x3f, 0x8b, 0xa2,
	0xe4, 0xaa, 0x2b, 0xf9, 0xaa, 0x73, 0xd4, 0xb5, 0xf8, 0x84, 0x48, 0xa7, 0xa1, 0xcb, 0xba, 0x02,
	0xb6, 0x48, 0x87, 0x63, 0x9e, 0xf9, 0x36, 0x76, 0x8e, 0x14, 0x75, 0xaa, 0x59, 0xbe, 0x12, 0x5b,
	0x2d, 0x0c, 0x49, 0x6e, 0x2d, 0x3f, 0x40, 0x70, 0xb4, 0x61, 0xa0, 0x79, 0xba, 0x7a, 0xc9, 0x16,
	0x8c, 0x5c, 0x65, 0xb3, 0x08, 0x73, 0x03, 0x86, 0x5b, 0xc4, 0xdb, 0x5e, 0xa1, 0xbe, 0x46, 0x30,
	0xe8, 0xfa, 0xf1, 0x11, 0x2d, 0x41, 0xae, 0xd2, 0x22, 0xd9, 0x4c, 0xb7, 0xe6, 0x23, 0x38, 0xe0,
	0x81, 0xb1, 0xbd, 0x82, 0x3c, 0x42, 0x4e, 0x30, 0xf7, 0x49, 0x4c, 0x11, 0x83, 0xe6, 0x37, 0x89,
	0x22, 0xb8, 0x17, 0xba, 0x34, 0x0b, 0x4f, 0xdf, 0x16, 0x2b, 0x7e, 0x92, 0x3f, 0xc8, 0x8b, 0x20,
	0x7b, 0x41, 0x6f, 0xaf, 0x50, 0x9f, 0x00, 0xe6, 0x51, 0x5c, 0xc2, 0x38, 0xc0, 0x50, 0x15, 0x30,
	0x9c, 0x84, 0x6d, 0xf6, 0x37, 0x89, 0x50, 0xa1, 0xbf, 0x4e, 0x85, 0x29, 0xb1, 0x21, 0xb1, 0x4f,
	0x88, 0xf0, 0x12, 0x17, 0xc1, 0x36, 0x94, 0x3f, 0xb7, 0x34, 0x70, 0xfc, 0xc8, 0x06, 0xf4, 0xb8,
	0xe2, 0x0b, 0x76, 0xef, 0x43, 0xb7, 0xca, 0x2a, 0xbb, 0x38, 0x9a, 0x71, 0xcb, 0xdb, 0x6f, 0xcb,
	0xd1, 0x43, 0x2d, 0xe4, 0xd2, 0x19, 0xa3, 0xf4, 0x62, 0x39, 0xba, 0x8b, 0xc7, 0xe5, 0x5e, 0xe4,
	0xa4, 0x70, 0x27, 0x0f, 0xc1, 0x2e, 0x1e, 0xcf, 0xa6, 0xfa, 0x0a, 0xfc, 0xcf, 0x52, 0x22, 0xa5,
	0x6b, 0x2c, 0xd4, 0xd6, 0x64, 0xb7, 0xf5, 0x38, 0xa3, 0xc9, 0x0b, 0xf0, 0x7f, 0x7b, 0xa7, 0x00,
	0x35, 0x06, 0x5b, 0xad, 0x35, 0xb6, 0x2f, 0x88, 0xe2, 0x49, 0x66, 0x26, 0xf7, 0xc0, 0xcb, 0xf3,
	0x64, 0x89, 0x1d, 0xea, 0xcc, 0x94, 0xfd, 0x39, 0x33, 0x0c, 0xb8, 0xfa, 0xa5, 0x88, 0xd4, 0x14,
	0xd4, 0x57, 0xa8, 0xe6, 0x72, 0xcc, 0x52, 0x23, 0x4b, 0x8a, 0xb6, 0xea, 0x41, 0x2f, 0xf6, 0x7a,
	0x9c, 0x68, 0x0e, 0x5e, 0xf5, 0x44, 0xd8, 0xde, 0xfb, 0xfb, 0x45, 0x6d, 0xad, 0xdc, 0x4c, 0x52,
	0xd4, 0xd6, 0xc9, 0xf5, 0x12, 0xe1, 0x21, 0x82, 0x51, 0x0f, 0xcd, 0xd7, 0x5a, 0x2d, 0xd7, 0x43,
	0x9a, 0x8f, 0x21, 0x1e, 0x08, 0x71, 0x7b, 0x05, 0xfb, 0x01, 0xc1, 0x6b, 0x1e, 0xe1, 0x43, 0x15,
	0x89, 0x75, 0x50, 0xa9, 0x49, 0x81, 0xb8, 0x0e, 0x43, 0xfe, 0xe0, 0xdb, 0x2b, 0x58, 0x2f, 0xe0,
	0xf3, 0x56, 0xff, 0x7c, 0x8e, 0xf5, 0x8e, 0x76, 0xf2, 0xba, 0x0c, 0x3d, 0xae, 0xb7, 0x22, 0xe6,
	0x24, 0x74, 0xf3, 0x1e, 0x53, 0x64, 0xca, 0x83, 0x7e, 0x41, 0xd9, 0x66, 0x11, 0x50, 0x98, 0xca,
	0x47, 0xa0, 0x87, 0x31, 0xb1, 0xb0, 0xcc, 0x97, 0xbd, 0x2b, 0x93, 0x3c, 0x02, 0xbd, 0xee, 0xcd,
	0x02, 0x49, 0x3f, 0x6c, 0x63, 0x79, 0xd4, 0x28, 0xe7, 0x45, 0x22, 0x65, 0x79, 0x75, 0xbe, 0x9c,
	0x97, 0x23, 0x30, 0x50, 0x6d, 0x92, 0x28, 0x12, 0x75, 0x51, 0xa3, 0x37, 0xed, 0xbc, 0x21, 0x17,
	0x60, 0x7f, 0x93, 0x75, 0xe1, 0x7b, 0x01, 0xb6, 0xa7, 0xed, 0x97, 0x42, 0xdd, 0x23, 0x3e, 0x44,
	0x5d, 0x0e, 0x39, 0xdd, 0x55, 0x1f, 0xa3, 0x3f, 0x1d, 0x80, 0x2e, 0x26, 0x27, 0x7e, 0x84, 0x60,
	0x97, 0xab, 0xfb, 0xc6, 0x71, 0x1f, 0xcf, 0x8d, 0x7a, 0x78, 0xe9, 0x8d, 0x60, 0x46, 0x9c, 0x97,
	0x3c, 0x76, 0xef, 0xe7, 0x3f, 0x3f, 0xeb, 0x7c, 0x13, 0x1f, 0x57, 0xbc, 0xc7, 0x08, 0xf6, 0x04,
	0x24, 0xcf, 0xbc, 0xa4, 0xd2, 0x02, 0xe9, 0x8f, 0x08, 0x70, 0x7d, 0x83, 0x8e, 0xdf, 0x6a, 0x09,
	0x4b, 0x83, 0x86, 0x5f, 0x7a, 0x3b, 0x84, 0xa5, 0xa0, 0x32, 0xc9, 0xa8, 0x8c, 0xe1, 0x13, 0xc1,
	0xa8, 0xf0, 0x8f, 0xd3, 0x14, 0xff, 0x62, 0xc0, 0x7f, 0x21, 0xd8, 0xdb, 0xb8, 0x4d, 0xc7, 0x27,
	0x7d, 0xa0, 0x79, 0xce, 0x09, 0xa4, 0xb1, 0x90, 0xd6, 0x82, 0xdc, 0x02, 0x23, 0x37, 0x83, 0xa7,
	0x5b, 0x24, 0xa7, 0x72, 0x77, 0xa9, 0xb2, 0xe3, 0x2f, 0xc5, 0xda, 0x4d, 0xe5, 0x36, 0xcb, 0x5f,
	0x77, 0xf0, 0x0a, 0x82, 0x3d, 0x0d, 0x3b, 0x78, 0x7c, 0x22, 0x08, 0xd2, 0x9a, 0x01, 0x82, 0x74,
	0x32, 0x9c, 0xb1, 0x60, 0x39, 0xcf, 0x58, 0xbe, 0x8b, 0xcf, 0x84, 0x62, 0xa9, 0x1b, 0xd9, 0x1a,
	0x92, 0xbf, 0x20, 0xc0, 0xf5, 0xdd, 0xbd, 0xef, 0xf5, 0x6c, 0x3a, 0x55, 0xf0, 0xbd, 0x9e, 0xcd,
	0x47, 0x09, 0xf2, 0x59, 0xc6, 0xed, 0x34, 0x9e, 0x0c, 0xc8, 0x4d, 0xdc, 0xcf, 0xa6, 0xa7, 0xe7,
	0x6e, 0x1b, 0x5a, 0x3d, 0xbd, 0x86, 0xa3, 0x86, 0x56, 0x4f, 0xaf, 0xf1, 0x1c, 0x20, 0xf4, 0xe9,
	0x09, 0x86, 0x05, 0xd5, 0x2c, 0x59, 0xdd, 0x92, 0x43, 0xf2, 0x9b, 0x4e, 0x38, 0xd8, 0x52, 0x83,
	0x8d, 0xcf, 0x86, 0xc1, 0xdd, 0xe4, 0x43, 0x49, 0x9a, 0x6d, 0x8f, 0x33, 0x21, 0x8a, 0xca, 0x44,
	0xb9, 0x82, 0x3f, 0x58, 0x9b, 0x28, 0x29, 0x83, 0x56, 0x5f, 0x73, 0x6a, 0xe4, 0x2a, 0x8e, 0x4e,
	0x7f, 0x23, 0x67, 0x10, 0x56, 0xdf, 0x6b, 0xe3, 0xf1, 0x20, 0xbf, 0xc8, 0x06, 0x93, 0x04, 0xe9,
	0x54, 0x78, 0x07, 0x42, 0x83, 0x0b, 0x4c, 0x83, 0x39, 0x7c, 0x36, 0xd4, 0xcf, 0x9a, 0x68, 0xa9,
	0x34, 0xf3, 0x99, 0x72, 0xdd, 0x8e, 0x7f, 0x50, 0xcd, 0xe4, 0xce, 0xd5, 0x39, 0xe3, 0x53, 0x61,
	0x4e, 0xb1, 0xfa, 0x53, 0x50, 0x9a, 0x58, 0x83, 0x07, 0x41, 0xfc, 0x22, 0x23, 0x3e, 0x8f, 0x67,
	0xd7, 0x78, 0xf8, 0xec, 0xbb, 0xc7, 0x61, 0xfe, 0x3d, 0x82, 0x1d, 0x55, 0x6d, 0x34, 0x1e, 0xf1,
	0x01, 0x5a, 0xdf, 0xf2, 0x4b, 0xa3, 0x41, 0x4c, 0x04, 0x99, 0x13, 0x8c, 0xcc, 0x71, 0x1c, 0x6f,
	0x91, 0x8c, 0x20, 0xc1, 0xa7, 0x09, 0x0f, 0x11, 0x00, 0x77, 0x9a, 0xa8, 0xcc, 0x4c, 0xe1, 0xa3,
	0x2d, 0xc5, 0xb7, 0xd1, 0x0e, 0xb7, 0xb8, 0x5b, 0x00, 0x3d, 0xcd, 0x80, 0x8e, 0xe3, 0xb1, 0x60,
	0x40, 0xd3, 0x95, 0x94, 0xae, 0x29, 0xb7, 0x45, 0x2b, 0x7e, 0x07, 0x3f, 0x40, 0x00, 0xab, 0xdd,
	0x3a, 0x3e, 0xe6, 0x03, 0xa2, 0xae, 0xdb, 0x97, 0x46, 0x02, 0x58, 0x84, 0xd4, 0xd8, 0x20, 0x4b,
	0xfc, 0xb6, 0xa4, 0x74, 0x0d, 0xff, 0x8b, 0x60, 0x9f, 0x47, 0xab, 0x80, 0x03, 0x5d, 0xe8, 0x86,
	0xa3, 0x06, 0x29, 0xb1, 0x16, 0x17, 0x82, 0xe3, 0x25, 0xc6, 0x71, 0x01, 0xcf, 0x85, 0xfb, 0x51,
	0xe4, 0x98, 0xd7, 0x94, 0xdd, 0x35, 0x35, 0x2f, 0x89, 0x0e, 0xef, 0x40, 0x25, 0xb1, 0x96, 0xf1,
	0xc9, 0x70, 0xc6, 0xed, 0x29, 0x89, 0x75, 0x24, 0x1f, 0x77, 0xc2, 0x91, 0x00, 0x9d, 0x34, 0x3e,
	0x1f, 0xfe, 0xbc, 0x9a, 0x95, 0xc7, 0x64, 0x3b, 0x5d, 0x0a, 0x99, 0xae, 0x31, 0x99, 0xd2, 0xf8,
	0xc3, 0xb6, 0x5c, 0x09, 0xaf, 0x5a, 0x79, 0xbf, 0xd3, 0x99, 0x9d, 0x37, 0x6d, 0xa7, 0xf1, 0x99,
	0xf0, 0x14, 0x5d, 0x59, 0x76, 0x7a, 0xcd, 0x7e, 0x84, 0x3e, 0x57, 0x98, 0x3e, 0x97, 0xf0, 0x85,
	0xf6, 0xe8, 0xe3, 0x2e, 0x27, 0xdf, 0x22, 0xe8, 0xe6, 0x4d, 0xb9, 0x6f, 0x25, 0xa9, 0x9f, 0x0a,
	0xf8, 0x56, 0x92, 0x06, 0x23, 0x03, 0xf9, 0x38, 0xa3, 0xa3, 0xe0, 0xe1, 0x16, 0xe9, 0xf0, 0x21,
	0x01, 0x7e, 0x8c, 0x60, 0x67, 0x75, 0x53, 0x8d, 0x47, 0x03, 0x74, 0xe0, 0x36, 0xde, 0x78, 0x20,
	0x9b, 0x90, 0x15, 0x85, 0x09, 0x9c, 0xb2, 0x87, 0x11, 0xca, 0x6d, 0xf6, 0x7c, 0x07, 0xff, 0x8e,
	0x60, 0x4f, 0xc3, 0x31, 0x83, 0x6f, 0x8a, 0xf2, 0x1a, 0x5e, 0xf8, 0xa6, 0x28, 0xcf, 0xc9, 0x86,
	0x3c, 0xcd, 0xb8, 0x4d, 0xe0, 0xf1, 0x50, 0xdc, 0x52, 0xce, 0x44, 0x23, 0x31, 0xf7, 0x64, 0x25,
	0x82, 0x9e, 0xae, 0x44, 0xd0, 0x1f, 0x2b, 0x11, 0x74, 0xff, 0x79, 0xa4, 0xe3, 0xe9, 0xf3, 0x48,
	0xc7, 0xaf, 0xcf, 0x23, 0x1d, 0x97, 0xe3, 0x55, 0x73, 0xfc, 0x26, 0x41, 0x6e, 0xc4, 0x95, 0x25,
	0x3b, 0x12, 0x1b, 0xec, 0xa7, 0xbb, 0xd9, 0x1c, 0x2d, 0xfe, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x60, 0xa7, 0x07, 0xc9, 0xe9, 0x21, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Return full balance of the module
	ModuleBalance(ctx context.Context, in *ModuleBalanceRequest, opts ...grpc.CallOption) (*ModuleBalanceResponse, error)
	// Return locked balance of the module
	ModuleLockedAmount(ctx context.Context, in *ModuleLockedAmountRequest, opts ...grpc.CallOption) (*ModuleLockedAmountResponse, error)
	// Returns unlockable coins which are not withdrawn yet
	AccountUnlockableCoins(ctx context.Context, in *AccountUnlockableCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockableCoinsResponse, error)
	// Returns unlocking coins
	AccountUnlockingCoins(ctx context.Context, in *AccountUnlockingCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockingCoinsResponse, error)
	// Return a locked coins that can't be withdrawn
	AccountLockedCoins(ctx context.Context, in *AccountLockedCoinsRequest, opts ...grpc.CallOption) (*AccountLockedCoinsResponse, error)
	// Returns locked records of an account with unlock time beyond timestamp
	AccountLockedPastTime(ctx context.Context, in *AccountLockedPastTimeRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeResponse, error)
	// Returns locked records of an account with unlock time beyond timestamp
	// excluding tokens started unlocking
	AccountLockedPastTimeNotUnlockingOnly(ctx context.Context, in *AccountLockedPastTimeNotUnlockingOnlyRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeNotUnlockingOnlyResponse, error)
	// Returns unlocked records with unlock time before timestamp
	AccountUnlockedBeforeTime(ctx context.Context, in *AccountUnlockedBeforeTimeRequest, opts ...grpc.CallOption) (*AccountUnlockedBeforeTimeResponse, error)
	// Returns lock records by address, timestamp, denom
	AccountLockedPastTimeDenom(ctx context.Context, in *AccountLockedPastTimeDenomRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeDenomResponse, error)
	// Returns total locked per denom with longer past given time
	LockedDenom(ctx context.Context, in *LockedDenomRequest, opts ...grpc.CallOption) (*LockedDenomResponse, error)
	// Returns lock record by id
	LockedByID(ctx context.Context, in *LockedRequest, opts ...grpc.CallOption) (*LockedResponse, error)
	// Returns next lock ID
	NextLockID(ctx context.Context, in *NextLockIDRequest, opts ...grpc.CallOption) (*NextLockIDResponse, error)
	// Returns account locked records with longer duration
	AccountLockedLongerDuration(ctx context.Context, in *AccountLockedLongerDurationRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationResponse, error)
	// Returns account locked records with a specific duration
	AccountLockedDuration(ctx context.Context, in *AccountLockedDurationRequest, opts ...grpc.CallOption) (*AccountLockedDurationResponse, error)
	// Returns account locked records with longer duration excluding tokens
	// started unlocking
	AccountLockedLongerDurationNotUnlockingOnly(ctx context.Context, in *AccountLockedLongerDurationNotUnlockingOnlyRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationNotUnlockingOnlyResponse, error)
	// Returns account's locked records for a denom with longer duration
	AccountLockedLongerDurationDenom(ctx context.Context, in *AccountLockedLongerDurationDenomRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationDenomResponse, error)
	// Params returns lockup params.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// DenomLockNum returns the number of lockups for the specified denom.
	DenomLockNum(ctx context.Context, in *DenomLockNumRequest, opts ...grpc.CallOption) (*DenomLockNumResponse, error)
	// DenomLockNumBreakdown returns the denom breakdown of the number of lockups.
	DenomLockNumBreakdown(ctx context.Context, in *DenomLockNumBreakdownRequest, opts ...grpc.CallOption) (*DenomLockNumBreakdownResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ModuleBalance(ctx context.Context, in *ModuleBalanceRequest, opts ...grpc.CallOption) (*ModuleBalanceResponse, error) {
	out := new(ModuleBalanceResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/ModuleBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleLockedAmount(ctx context.Context, in *ModuleLockedAmountRequest, opts ...grpc.CallOption) (*ModuleLockedAmountResponse, error) {
	out := new(ModuleLockedAmountResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/ModuleLockedAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountUnlockableCoins(ctx context.Context, in *AccountUnlockableCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockableCoinsResponse, error) {
	out := new(AccountUnlockableCoinsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountUnlockableCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountUnlockingCoins(ctx context.Context, in *AccountUnlockingCoinsRequest, opts ...grpc.CallOption) (*AccountUnlockingCoinsResponse, error) {
	out := new(AccountUnlockingCoinsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountUnlockingCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedCoins(ctx context.Context, in *AccountLockedCoinsRequest, opts ...grpc.CallOption) (*AccountLockedCoinsResponse, error) {
	out := new(AccountLockedCoinsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedPastTime(ctx context.Context, in *AccountLockedPastTimeRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeResponse, error) {
	out := new(AccountLockedPastTimeResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedPastTimeNotUnlockingOnly(ctx context.Context, in *AccountLockedPastTimeNotUnlockingOnlyRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeNotUnlockingOnlyResponse, error) {
	out := new(AccountLockedPastTimeNotUnlockingOnlyResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTimeNotUnlockingOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountUnlockedBeforeTime(ctx context.Context, in *AccountUnlockedBeforeTimeRequest, opts ...grpc.CallOption) (*AccountUnlockedBeforeTimeResponse, error) {
	out := new(AccountUnlockedBeforeTimeResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountUnlockedBeforeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedPastTimeDenom(ctx context.Context, in *AccountLockedPastTimeDenomRequest, opts ...grpc.CallOption) (*AccountLockedPastTimeDenomResponse, error) {
	out := new(AccountLockedPastTimeDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTimeDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedDenom(ctx context.Context, in *LockedDenomRequest, opts ...grpc.CallOption) (*LockedDenomResponse, error) {
	out := new(LockedDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/LockedDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LockedByID(ctx context.Context, in *LockedRequest, opts ...grpc.CallOption) (*LockedResponse, error) {
	out := new(LockedResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/LockedByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextLockID(ctx context.Context, in *NextLockIDRequest, opts ...grpc.CallOption) (*NextLockIDResponse, error) {
	out := new(NextLockIDResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/NextLockID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedLongerDuration(ctx context.Context, in *AccountLockedLongerDurationRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationResponse, error) {
	out := new(AccountLockedLongerDurationResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedDuration(ctx context.Context, in *AccountLockedDurationRequest, opts ...grpc.CallOption) (*AccountLockedDurationResponse, error) {
	out := new(AccountLockedDurationResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedDuration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedLongerDurationNotUnlockingOnly(ctx context.Context, in *AccountLockedLongerDurationNotUnlockingOnlyRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationNotUnlockingOnlyResponse, error) {
	out := new(AccountLockedLongerDurationNotUnlockingOnlyResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDurationNotUnlockingOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountLockedLongerDurationDenom(ctx context.Context, in *AccountLockedLongerDurationDenomRequest, opts ...grpc.CallOption) (*AccountLockedLongerDurationDenomResponse, error) {
	out := new(AccountLockedLongerDurationDenomResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDurationDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomLockNum(ctx context.Context, in *DenomLockNumRequest, opts ...grpc.CallOption) (*DenomLockNumResponse, error) {
	out := new(DenomLockNumResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/DenomLockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DenomLockNumBreakdown(ctx context.Context, in *DenomLockNumBreakdownRequest, opts ...grpc.CallOption) (*DenomLockNumBreakdownResponse, error) {
	out := new(DenomLockNumBreakdownResponse)
	err := c.cc.Invoke(ctx, "/dymensionxyz.dymension.lockup.Query/DenomLockNumBreakdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Return full balance of the module
	ModuleBalance(context.Context, *ModuleBalanceRequest) (*ModuleBalanceResponse, error)
	// Return locked balance of the module
	ModuleLockedAmount(context.Context, *ModuleLockedAmountRequest) (*ModuleLockedAmountResponse, error)
	// Returns unlockable coins which are not withdrawn yet
	AccountUnlockableCoins(context.Context, *AccountUnlockableCoinsRequest) (*AccountUnlockableCoinsResponse, error)
	// Returns unlocking coins
	AccountUnlockingCoins(context.Context, *AccountUnlockingCoinsRequest) (*AccountUnlockingCoinsResponse, error)
	// Return a locked coins that can't be withdrawn
	AccountLockedCoins(context.Context, *AccountLockedCoinsRequest) (*AccountLockedCoinsResponse, error)
	// Returns locked records of an account with unlock time beyond timestamp
	AccountLockedPastTime(context.Context, *AccountLockedPastTimeRequest) (*AccountLockedPastTimeResponse, error)
	// Returns locked records of an account with unlock time beyond timestamp
	// excluding tokens started unlocking
	AccountLockedPastTimeNotUnlockingOnly(context.Context, *AccountLockedPastTimeNotUnlockingOnlyRequest) (*AccountLockedPastTimeNotUnlockingOnlyResponse, error)
	// Returns unlocked records with unlock time before timestamp
	AccountUnlockedBeforeTime(context.Context, *AccountUnlockedBeforeTimeRequest) (*AccountUnlockedBeforeTimeResponse, error)
	// Returns lock records by address, timestamp, denom
	AccountLockedPastTimeDenom(context.Context, *AccountLockedPastTimeDenomRequest) (*AccountLockedPastTimeDenomResponse, error)
	// Returns total locked per denom with longer past given time
	LockedDenom(context.Context, *LockedDenomRequest) (*LockedDenomResponse, error)
	// Returns lock record by id
	LockedByID(context.Context, *LockedRequest) (*LockedResponse, error)
	// Returns next lock ID
	NextLockID(context.Context, *NextLockIDRequest) (*NextLockIDResponse, error)
	// Returns account locked records with longer duration
	AccountLockedLongerDuration(context.Context, *AccountLockedLongerDurationRequest) (*AccountLockedLongerDurationResponse, error)
	// Returns account locked records with a specific duration
	AccountLockedDuration(context.Context, *AccountLockedDurationRequest) (*AccountLockedDurationResponse, error)
	// Returns account locked records with longer duration excluding tokens
	// started unlocking
	AccountLockedLongerDurationNotUnlockingOnly(context.Context, *AccountLockedLongerDurationNotUnlockingOnlyRequest) (*AccountLockedLongerDurationNotUnlockingOnlyResponse, error)
	// Returns account's locked records for a denom with longer duration
	AccountLockedLongerDurationDenom(context.Context, *AccountLockedLongerDurationDenomRequest) (*AccountLockedLongerDurationDenomResponse, error)
	// Params returns lockup params.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// DenomLockNum returns the number of lockups for the specified denom.
	DenomLockNum(context.Context, *DenomLockNumRequest) (*DenomLockNumResponse, error)
	// DenomLockNumBreakdown returns the denom breakdown of the number of lockups.
	DenomLockNumBreakdown(context.Context, *DenomLockNumBreakdownRequest) (*DenomLockNumBreakdownResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ModuleBalance(ctx context.Context, req *ModuleBalanceRequest) (*ModuleBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleBalance not implemented")
}
func (*UnimplementedQueryServer) ModuleLockedAmount(ctx context.Context, req *ModuleLockedAmountRequest) (*ModuleLockedAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleLockedAmount not implemented")
}
func (*UnimplementedQueryServer) AccountUnlockableCoins(ctx context.Context, req *AccountUnlockableCoinsRequest) (*AccountUnlockableCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnlockableCoins not implemented")
}
func (*UnimplementedQueryServer) AccountUnlockingCoins(ctx context.Context, req *AccountUnlockingCoinsRequest) (*AccountUnlockingCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnlockingCoins not implemented")
}
func (*UnimplementedQueryServer) AccountLockedCoins(ctx context.Context, req *AccountLockedCoinsRequest) (*AccountLockedCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedCoins not implemented")
}
func (*UnimplementedQueryServer) AccountLockedPastTime(ctx context.Context, req *AccountLockedPastTimeRequest) (*AccountLockedPastTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedPastTime not implemented")
}
func (*UnimplementedQueryServer) AccountLockedPastTimeNotUnlockingOnly(ctx context.Context, req *AccountLockedPastTimeNotUnlockingOnlyRequest) (*AccountLockedPastTimeNotUnlockingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedPastTimeNotUnlockingOnly not implemented")
}
func (*UnimplementedQueryServer) AccountUnlockedBeforeTime(ctx context.Context, req *AccountUnlockedBeforeTimeRequest) (*AccountUnlockedBeforeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountUnlockedBeforeTime not implemented")
}
func (*UnimplementedQueryServer) AccountLockedPastTimeDenom(ctx context.Context, req *AccountLockedPastTimeDenomRequest) (*AccountLockedPastTimeDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedPastTimeDenom not implemented")
}
func (*UnimplementedQueryServer) LockedDenom(ctx context.Context, req *LockedDenomRequest) (*LockedDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedDenom not implemented")
}
func (*UnimplementedQueryServer) LockedByID(ctx context.Context, req *LockedRequest) (*LockedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockedByID not implemented")
}
func (*UnimplementedQueryServer) NextLockID(ctx context.Context, req *NextLockIDRequest) (*NextLockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextLockID not implemented")
}
func (*UnimplementedQueryServer) AccountLockedLongerDuration(ctx context.Context, req *AccountLockedLongerDurationRequest) (*AccountLockedLongerDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedLongerDuration not implemented")
}
func (*UnimplementedQueryServer) AccountLockedDuration(ctx context.Context, req *AccountLockedDurationRequest) (*AccountLockedDurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedDuration not implemented")
}
func (*UnimplementedQueryServer) AccountLockedLongerDurationNotUnlockingOnly(ctx context.Context, req *AccountLockedLongerDurationNotUnlockingOnlyRequest) (*AccountLockedLongerDurationNotUnlockingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedLongerDurationNotUnlockingOnly not implemented")
}
func (*UnimplementedQueryServer) AccountLockedLongerDurationDenom(ctx context.Context, req *AccountLockedLongerDurationDenomRequest) (*AccountLockedLongerDurationDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountLockedLongerDurationDenom not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) DenomLockNum(ctx context.Context, req *DenomLockNumRequest) (*DenomLockNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomLockNum not implemented")
}
func (*UnimplementedQueryServer) DenomLockNumBreakdown(ctx context.Context, req *DenomLockNumBreakdownRequest) (*DenomLockNumBreakdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenomLockNumBreakdown not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ModuleBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/ModuleBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleBalance(ctx, req.(*ModuleBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleLockedAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModuleLockedAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleLockedAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/ModuleLockedAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleLockedAmount(ctx, req.(*ModuleLockedAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountUnlockableCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnlockableCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountUnlockableCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountUnlockableCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountUnlockableCoins(ctx, req.(*AccountUnlockableCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountUnlockingCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnlockingCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountUnlockingCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountUnlockingCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountUnlockingCoins(ctx, req.(*AccountUnlockingCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedCoins(ctx, req.(*AccountLockedCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedPastTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedPastTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedPastTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedPastTime(ctx, req.(*AccountLockedPastTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedPastTimeNotUnlockingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedPastTimeNotUnlockingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedPastTimeNotUnlockingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTimeNotUnlockingOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedPastTimeNotUnlockingOnly(ctx, req.(*AccountLockedPastTimeNotUnlockingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountUnlockedBeforeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnlockedBeforeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountUnlockedBeforeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountUnlockedBeforeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountUnlockedBeforeTime(ctx, req.(*AccountUnlockedBeforeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedPastTimeDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedPastTimeDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedPastTimeDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedPastTimeDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedPastTimeDenom(ctx, req.(*AccountLockedPastTimeDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockedDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/LockedDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedDenom(ctx, req.(*LockedDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LockedByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LockedByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/LockedByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LockedByID(ctx, req.(*LockedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextLockID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextLockIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextLockID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/NextLockID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextLockID(ctx, req.(*NextLockIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedLongerDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedLongerDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedLongerDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedLongerDuration(ctx, req.(*AccountLockedLongerDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedDuration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedDurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedDuration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedDuration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedDuration(ctx, req.(*AccountLockedDurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedLongerDurationNotUnlockingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedLongerDurationNotUnlockingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedLongerDurationNotUnlockingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDurationNotUnlockingOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedLongerDurationNotUnlockingOnly(ctx, req.(*AccountLockedLongerDurationNotUnlockingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountLockedLongerDurationDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountLockedLongerDurationDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountLockedLongerDurationDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/AccountLockedLongerDurationDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountLockedLongerDurationDenom(ctx, req.(*AccountLockedLongerDurationDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomLockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomLockNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomLockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/DenomLockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomLockNum(ctx, req.(*DenomLockNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DenomLockNumBreakdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenomLockNumBreakdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DenomLockNumBreakdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dymensionxyz.dymension.lockup.Query/DenomLockNumBreakdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DenomLockNumBreakdown(ctx, req.(*DenomLockNumBreakdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dymensionxyz.dymension.lockup.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModuleBalance",
			Handler:    _Query_ModuleBalance_Handler,
		},
		{
			MethodName: "ModuleLockedAmount",
			Handler:    _Query_ModuleLockedAmount_Handler,
		},
		{
			MethodName: "AccountUnlockableCoins",
			Handler:    _Query_AccountUnlockableCoins_Handler,
		},
		{
			MethodName: "AccountUnlockingCoins",
			Handler:    _Query_AccountUnlockingCoins_Handler,
		},
		{
			MethodName: "AccountLockedCoins",
			Handler:    _Query_AccountLockedCoins_Handler,
		},
		{
			MethodName: "AccountLockedPastTime",
			Handler:    _Query_AccountLockedPastTime_Handler,
		},
		{
			MethodName: "AccountLockedPastTimeNotUnlockingOnly",
			Handler:    _Query_AccountLockedPastTimeNotUnlockingOnly_Handler,
		},
		{
			MethodName: "AccountUnlockedBeforeTime",
			Handler:    _Query_AccountUnlockedBeforeTime_Handler,
		},
		{
			MethodName: "AccountLockedPastTimeDenom",
			Handler:    _Query_AccountLockedPastTimeDenom_Handler,
		},
		{
			MethodName: "LockedDenom",
			Handler:    _Query_LockedDenom_Handler,
		},
		{
			MethodName: "LockedByID",
			Handler:    _Query_LockedByID_Handler,
		},
		{
			MethodName: "NextLockID",
			Handler:    _Query_NextLockID_Handler,
		},
		{
			MethodName: "AccountLockedLongerDuration",
			Handler:    _Query_AccountLockedLongerDuration_Handler,
		},
		{
			MethodName: "AccountLockedDuration",
			Handler:    _Query_AccountLockedDuration_Handler,
		},
		{
			MethodName: "AccountLockedLongerDurationNotUnlockingOnly",
			Handler:    _Query_AccountLockedLongerDurationNotUnlockingOnly_Handler,
		},
		{
			MethodName: "AccountLockedLongerDurationDenom",
			Handler:    _Query_AccountLockedLongerDurationDenom_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "DenomLockNum",
			Handler:    _Query_DenomLockNum_Handler,
		},
		{
			MethodName: "DenomLockNumBreakdown",
			Handler:    _Query_DenomLockNumBreakdown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dymensionxyz/dymension/lockup/query.proto",
}

func (m *ModuleBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModuleBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ModuleLockedAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLockedAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLockedAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ModuleLockedAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleLockedAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ModuleLockedAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockableCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockableCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockableCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockableCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockableCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockableCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockingCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockingCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockingCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockingCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockingCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockingCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedCoinsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedCoinsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedCoinsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedCoinsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedCoinsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedCoinsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQuery(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockedBeforeTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockedBeforeTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockedBeforeTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintQuery(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountUnlockedBeforeTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountUnlockedBeforeTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountUnlockedBeforeTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintQuery(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedPastTimeDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedPastTimeDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedPastTimeDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LockedDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n5, err5 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintQuery(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x12
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockedDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LockedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LockedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lock != nil {
		{
			size, err := m.Lock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NextLockIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextLockIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextLockIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NextLockIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextLockIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextLockIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintQuery(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedDurationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedDurationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedDurationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n8, err8 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintQuery(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedDurationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedDurationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedDurationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n9, err9 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err9 != nil {
		return 0, err9
	}
	i -= n9
	i = encodeVarintQuery(dAtA, i, uint64(n9))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	n10, err10 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err10 != nil {
		return 0, err10
	}
	i -= n10
	i = encodeVarintQuery(dAtA, i, uint64(n10))
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountLockedLongerDurationDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountLockedLongerDurationDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountLockedLongerDurationDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for iNdEx := len(m.Locks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Locks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DenomLockNumRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomLockNumRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomLockNumRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DenomLockNumResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomLockNumResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomLockNumResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockNum != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DenomLockNumBreakdownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomLockNumBreakdownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomLockNumBreakdownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DenomLockNumBreakdownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomLockNumBreakdownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomLockNumBreakdownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Breakdown) > 0 {
		for iNdEx := len(m.Breakdown) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Breakdown[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ModuleBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModuleBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ModuleLockedAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ModuleLockedAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountUnlockableCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountUnlockableCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountUnlockingCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountUnlockingCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedCoinsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedCoinsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedPastTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedPastTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountUnlockedBeforeTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountUnlockedBeforeTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedPastTimeDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedPastTimeDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *LockedDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *LockedDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *LockedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovQuery(uint64(m.LockId))
	}
	return n
}

func (m *LockedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lock != nil {
		l = m.Lock.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *NextLockIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NextLockIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovQuery(uint64(m.LockId))
	}
	return n
}

func (m *AccountLockedLongerDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedLongerDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedDurationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedDurationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AccountLockedLongerDurationDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountLockedLongerDurationDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Locks) > 0 {
		for _, e := range m.Locks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *DenomLockNumRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *DenomLockNumResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockNum != 0 {
		n += 1 + sovQuery(uint64(m.LockNum))
	}
	return n
}

func (m *DenomLockNumBreakdownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DenomLockNumBreakdownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Breakdown) > 0 {
		for _, e := range m.Breakdown {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLockedAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLockedAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLockedAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleLockedAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleLockedAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleLockedAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockableCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockableCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockableCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockableCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockableCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockableCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockingCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockingCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockingCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockingCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockingCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockingCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedCoinsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedCoinsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedCoinsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedCoinsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedCoinsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedCoinsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeNotUnlockingOnlyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeNotUnlockingOnlyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeNotUnlockingOnlyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeNotUnlockingOnlyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeNotUnlockingOnlyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeNotUnlockingOnlyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockedBeforeTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountUnlockedBeforeTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountUnlockedBeforeTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedPastTimeDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedPastTimeDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lock == nil {
				m.Lock = &PeriodLock{}
			}
			if err := m.Lock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextLockIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextLockIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextLockIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NextLockIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextLockIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextLockIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedDurationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedDurationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedDurationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedDurationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedDurationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedDurationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationNotUnlockingOnlyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationNotUnlockingOnlyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationNotUnlockingOnlyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationNotUnlockingOnlyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationNotUnlockingOnlyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountLockedLongerDurationDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountLockedLongerDurationDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Locks = append(m.Locks, PeriodLock{})
			if err := m.Locks[len(m.Locks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomLockNumRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomLockNumRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomLockNumRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomLockNumResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomLockNumResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomLockNumResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockNum", wireType)
			}
			m.LockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomLockNumBreakdownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomLockNumBreakdownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomLockNumBreakdownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomLockNumBreakdownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomLockNumBreakdownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomLockNumBreakdownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breakdown", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Breakdown = append(m.Breakdown, DenomLockNum{})
			if err := m.Breakdown[len(m.Breakdown)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
