// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/iro/iro.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params is a module parameters.
type Params struct {
	TakerFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=taker_fee,json=takerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"taker_fee" yaml:"taker_fee"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// Plan represents a plan in the IRO module.
type Plan struct {
	// The address of the plan owner.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// The ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// The module account address (optional).
	ModuleAccAddress string `protobuf:"bytes,3,opt,name=module_acc_address,json=moduleAccAddress,proto3" json:"module_acc_address,omitempty"`
	// The total amount of tokens allocated for the IRO.
	TotalAllocation types.Coin `protobuf:"bytes,4,opt,name=total_allocation,json=totalAllocation,proto3" json:"total_allocation"`
	// Indicates whether the IRO has settled.
	Settled bool `protobuf:"varint,5,opt,name=settled,proto3" json:"settled,omitempty"`
	// The start time of the plan.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time of the plan.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The amount of tokens sold so far.
	SoldAmt uint64 `protobuf:"varint,8,opt,name=sold_amt,json=soldAmt,proto3" json:"sold_amt,omitempty"`
	// The amount of tokens claimed so far.
	ClaimedAmt uint64 `protobuf:"varint,9,opt,name=claimed_amt,json=claimedAmt,proto3" json:"claimed_amt,omitempty"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{1}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Plan) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Plan) GetModuleAccAddress() string {
	if m != nil {
		return m.ModuleAccAddress
	}
	return ""
}

func (m *Plan) GetTotalAllocation() types.Coin {
	if m != nil {
		return m.TotalAllocation
	}
	return types.Coin{}
}

func (m *Plan) GetSettled() bool {
	if m != nil {
		return m.Settled
	}
	return false
}

func (m *Plan) GetStartTime() *timestamppb.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *Plan) GetEndTime() *timestamppb.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *Plan) GetSoldAmt() uint64 {
	if m != nil {
		return m.SoldAmt
	}
	return 0
}

func (m *Plan) GetClaimedAmt() uint64 {
	if m != nil {
		return m.ClaimedAmt
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.iro.Params")
	proto.RegisterType((*Plan)(nil), "dymensionxyz.dymension.iro.Plan")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/iro/iro.proto", fileDescriptor_e7d27cc6b5064d3f)
}

var fileDescriptor_e7d27cc6b5064d3f = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0xcb, 0x6e, 0x13, 0x3d,
	0x14, 0xce, 0xfc, 0x4d, 0x73, 0x71, 0x17, 0x7f, 0x64, 0x75, 0x31, 0x89, 0xc4, 0x24, 0x8a, 0x10,
	0xca, 0xa6, 0x1e, 0x4a, 0xc5, 0x02, 0x76, 0x09, 0xa8, 0x12, 0x5d, 0x55, 0x03, 0x2b, 0x36, 0x23,
	0x67, 0xec, 0x0e, 0x56, 0xed, 0x39, 0x91, 0xed, 0x94, 0x86, 0xa7, 0xe0, 0x55, 0x90, 0x78, 0x88,
	0x2e, 0x2b, 0x56, 0x88, 0x45, 0x84, 0x92, 0x37, 0xe0, 0x09, 0xd0, 0xd8, 0x4e, 0xd4, 0x0d, 0xea,
	0x62, 0x34, 0xfe, 0xce, 0x77, 0xb1, 0x75, 0xce, 0x41, 0x4f, 0xd9, 0x4a, 0xf1, 0xca, 0x08, 0xa8,
	0x6e, 0x57, 0x5f, 0xd2, 0x3d, 0x48, 0x85, 0x86, 0xfa, 0x23, 0x0b, 0x0d, 0x16, 0xf0, 0xe0, 0xa1,
	0x8a, 0xec, 0x01, 0x11, 0x1a, 0x06, 0xc7, 0x25, 0x94, 0xe0, 0x64, 0x69, 0x7d, 0xf2, 0x8e, 0xc1,
	0xb0, 0x04, 0x28, 0x25, 0x4f, 0x1d, 0x9a, 0x2f, 0xaf, 0x52, 0x2b, 0x14, 0x37, 0x96, 0xaa, 0x45,
	0x10, 0x24, 0x05, 0x18, 0x05, 0x26, 0x9d, 0x53, 0xc3, 0xd3, 0x9b, 0xd3, 0x39, 0xb7, 0xf4, 0x34,
	0x2d, 0x40, 0x54, 0x81, 0xef, 0x7b, 0x3e, 0xf7, 0xc9, 0x1e, 0x78, 0x6a, 0x2c, 0x50, 0xeb, 0x92,
	0x6a, 0xaa, 0x0c, 0xce, 0x51, 0xd7, 0xd2, 0x6b, 0xae, 0xf3, 0x2b, 0xce, 0xe3, 0x68, 0x14, 0x4d,
	0xba, 0xb3, 0xd9, 0xdd, 0x7a, 0xd8, 0xf8, 0xb5, 0x1e, 0x3e, 0x2b, 0x85, 0xfd, 0xb4, 0x9c, 0x93,
	0x02, 0x54, 0x70, 0x87, 0xdf, 0x89, 0x61, 0xd7, 0xa9, 0x5d, 0x2d, 0xb8, 0x21, 0x6f, 0x79, 0xf1,
	0x67, 0x3d, 0xec, 0xad, 0xa8, 0x92, 0xaf, 0xc7, 0xfb, 0xa0, 0x71, 0xd6, 0x71, 0xe7, 0x73, 0xce,
	0xc7, 0xdf, 0x0e, 0x50, 0xf3, 0x52, 0xd2, 0x0a, 0x13, 0x74, 0x08, 0x9f, 0x2b, 0xae, 0xc3, 0x2d,
	0xf1, 0x8f, 0xef, 0x27, 0xc7, 0xe1, 0x51, 0x53, 0xc6, 0x34, 0x37, 0xe6, 0xbd, 0xd5, 0xa2, 0x2a,
	0x33, 0x2f, 0xc3, 0x4f, 0x10, 0xd2, 0x20, 0x25, 0x5d, 0x2c, 0x72, 0xc1, 0xe2, 0xff, 0x6a, 0x53,
	0xd6, 0x0d, 0x95, 0x77, 0x0c, 0x9f, 0x23, 0xac, 0x80, 0x2d, 0x25, 0xcf, 0x69, 0x51, 0xe4, 0xd4,
	0x27, 0xc4, 0x07, 0x8f, 0x64, 0xf7, 0xbc, 0x67, 0x5a, 0x14, 0xa1, 0x8e, 0x2f, 0x50, 0xcf, 0x82,
	0xa5, 0x32, 0xa7, 0x52, 0x42, 0x41, 0xad, 0x80, 0x2a, 0x6e, 0x8e, 0xa2, 0xc9, 0xd1, 0x8b, 0x3e,
	0x09, 0x11, 0x75, 0x83, 0x49, 0x68, 0x30, 0x79, 0x03, 0xa2, 0x9a, 0x35, 0xeb, 0x16, 0x65, 0xff,
	0x3b, 0xe3, 0x74, 0xef, 0xc3, 0x31, 0x6a, 0x1b, 0x6e, 0xad, 0xe4, 0x2c, 0x3e, 0x1c, 0x45, 0x93,
	0x4e, 0xb6, 0x83, 0xf8, 0x15, 0x42, 0xc6, 0x52, 0x6d, 0xf3, 0x7a, 0x88, 0x71, 0xcb, 0xe5, 0x0f,
	0x88, 0x9f, 0x30, 0xd9, 0x4d, 0x98, 0x7c, 0xd8, 0x4d, 0x38, 0xeb, 0x3a, 0x75, 0x8d, 0xf1, 0x4b,
	0xd4, 0xe1, 0x15, 0xf3, 0xc6, 0xf6, 0xa3, 0xc6, 0x36, 0xaf, 0x98, 0xb3, 0xf5, 0x51, 0xc7, 0x80,
	0x64, 0x39, 0x55, 0x36, 0xee, 0x8c, 0xa2, 0x49, 0x33, 0x6b, 0xd7, 0x78, 0xaa, 0x2c, 0x1e, 0xa2,
	0xa3, 0x42, 0x52, 0xa1, 0xb8, 0x67, 0xbb, 0x8e, 0x45, 0xa1, 0x34, 0x55, 0x76, 0x76, 0x71, 0xb7,
	0x49, 0xa2, 0xfb, 0x4d, 0x12, 0xfd, 0xde, 0x24, 0xd1, 0xd7, 0x6d, 0xd2, 0xb8, 0xdf, 0x26, 0x8d,
	0x9f, 0xdb, 0xa4, 0xf1, 0xf1, 0xf9, 0x83, 0x9d, 0xf8, 0xc7, 0xde, 0xdf, 0x9c, 0xa5, 0xb7, 0x6e,
	0xf9, 0xdd, 0x86, 0xcc, 0x5b, 0xee, 0x91, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x16, 0x0c,
	0x6c, 0x55, 0x27, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TakerFee.Size()
		i -= size
		if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClaimedAmt != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.ClaimedAmt))
		i--
		dAtA[i] = 0x48
	}
	if m.SoldAmt != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.SoldAmt))
		i--
		dAtA[i] = 0x40
	}
	if m.EndTime != nil {
		{
			size, err := m.EndTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIro(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.StartTime != nil {
		{
			size, err := m.StartTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIro(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Settled {
		i--
		if m.Settled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TotalAllocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ModuleAccAddress) > 0 {
		i -= len(m.ModuleAccAddress)
		copy(dAtA[i:], m.ModuleAccAddress)
		i = encodeVarintIro(dAtA, i, uint64(len(m.ModuleAccAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintIro(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintIro(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintIro(dAtA []byte, offset int, v uint64) int {
	offset -= sovIro(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TakerFee.Size()
	n += 1 + l + sovIro(uint64(l))
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = len(m.ModuleAccAddress)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = m.TotalAllocation.Size()
	n += 1 + l + sovIro(uint64(l))
	if m.Settled {
		n += 2
	}
	if m.StartTime != nil {
		l = m.StartTime.Size()
		n += 1 + l + sovIro(uint64(l))
	}
	if m.EndTime != nil {
		l = m.EndTime.Size()
		n += 1 + l + sovIro(uint64(l))
	}
	if m.SoldAmt != 0 {
		n += 1 + sovIro(uint64(m.SoldAmt))
	}
	if m.ClaimedAmt != 0 {
		n += 1 + sovIro(uint64(m.ClaimedAmt))
	}
	return n
}

func sovIro(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIro(x uint64) (n int) {
	return sovIro(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Settled = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartTime == nil {
				m.StartTime = &timestamppb.Timestamp{}
			}
			if err := m.StartTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndTime == nil {
				m.EndTime = &timestamppb.Timestamp{}
			}
			if err := m.EndTime.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldAmt", wireType)
			}
			m.SoldAmt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldAmt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmt", wireType)
			}
			m.ClaimedAmt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClaimedAmt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIro(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIro
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIro
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIro
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIro
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIro        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIro          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIro = fmt.Errorf("proto: unexpected end of group")
)
