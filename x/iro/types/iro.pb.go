// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dymensionxyz/dymension/iro/iro.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params is a module parameters.
type Params struct {
	TakerFee                   github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=taker_fee,json=takerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"taker_fee"`
	CreationFee                github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=creation_fee,json=creationFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"creation_fee"`
	IncentivePlanMinimumParams IncentivePlanParams                    `protobuf:"bytes,3,opt,name=incentive_plan_minimum_params,json=incentivePlanMinimumParams,proto3" json:"incentive_plan_minimum_params"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetIncentivePlanMinimumParams() IncentivePlanParams {
	if m != nil {
		return m.IncentivePlanMinimumParams
	}
	return IncentivePlanParams{}
}

// Bonding curve represents a bonding curve in the IRO module.
// BondingCurve represents a bonding curve with parameters M, N, and C.
// The price of the token is calculated as follows:
// price = M * x^N + C
type BondingCurve struct {
	M github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=M,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"M"`
	N github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=N,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"N"`
	C github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=C,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"C"`
}

func (m *BondingCurve) Reset()         { *m = BondingCurve{} }
func (m *BondingCurve) String() string { return proto.CompactTextString(m) }
func (*BondingCurve) ProtoMessage()    {}
func (*BondingCurve) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{1}
}
func (m *BondingCurve) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BondingCurve) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BondingCurve.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BondingCurve) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BondingCurve.Merge(m, src)
}
func (m *BondingCurve) XXX_Size() int {
	return m.Size()
}
func (m *BondingCurve) XXX_DiscardUnknown() {
	xxx_messageInfo_BondingCurve.DiscardUnknown(m)
}

var xxx_messageInfo_BondingCurve proto.InternalMessageInfo

// Plan represents a plan in the IRO module.
type Plan struct {
	// The ID of the plan.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The ID of the rollapp.
	RollappId string `protobuf:"bytes,2,opt,name=rollapp_id,json=rollappId,proto3" json:"rollapp_id,omitempty"`
	// The module account address to hold the raised DYM tokens.
	ModuleAccAddress string `protobuf:"bytes,3,opt,name=module_acc_address,json=moduleAccAddress,proto3" json:"module_acc_address,omitempty"`
	// The total amount of tokens allocated for the IRO.
	TotalAllocation types.Coin   `protobuf:"bytes,4,opt,name=total_allocation,json=totalAllocation,proto3" json:"total_allocation"`
	BondingCurve    BondingCurve `protobuf:"bytes,5,opt,name=bonding_curve,json=bondingCurve,proto3" json:"bonding_curve"`
	// If set, the plan is settled, and the minted allocated tokens can be claimed for this settled_denom
	SettledDenom string `protobuf:"bytes,6,opt,name=settled_denom,json=settledDenom,proto3" json:"settled_denom,omitempty"`
	// The start time of the plan.
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// The time before which the rollapp cannot be started.
	PreLaunchTime time.Time `protobuf:"bytes,8,opt,name=pre_launch_time,json=preLaunchTime,proto3,stdtime" json:"pre_launch_time"`
	// The amount of tokens sold so far.
	SoldAmt github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,9,opt,name=sold_amt,json=soldAmt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"sold_amt"`
	// The amount of tokens claimed so far.
	ClaimedAmt github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=claimed_amt,json=claimedAmt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"claimed_amt"`
	// The incentive plan parameters for the tokens left after the plan is settled.
	IncentivePlanParams IncentivePlanParams `protobuf:"bytes,11,opt,name=incentive_plan_params,json=incentivePlanParams,proto3" json:"incentive_plan_params"`
}

func (m *Plan) Reset()         { *m = Plan{} }
func (m *Plan) String() string { return proto.CompactTextString(m) }
func (*Plan) ProtoMessage()    {}
func (*Plan) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{2}
}
func (m *Plan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Plan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Plan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Plan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plan.Merge(m, src)
}
func (m *Plan) XXX_Size() int {
	return m.Size()
}
func (m *Plan) XXX_DiscardUnknown() {
	xxx_messageInfo_Plan.DiscardUnknown(m)
}

var xxx_messageInfo_Plan proto.InternalMessageInfo

func (m *Plan) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Plan) GetRollappId() string {
	if m != nil {
		return m.RollappId
	}
	return ""
}

func (m *Plan) GetModuleAccAddress() string {
	if m != nil {
		return m.ModuleAccAddress
	}
	return ""
}

func (m *Plan) GetTotalAllocation() types.Coin {
	if m != nil {
		return m.TotalAllocation
	}
	return types.Coin{}
}

func (m *Plan) GetBondingCurve() BondingCurve {
	if m != nil {
		return m.BondingCurve
	}
	return BondingCurve{}
}

func (m *Plan) GetSettledDenom() string {
	if m != nil {
		return m.SettledDenom
	}
	return ""
}

func (m *Plan) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Plan) GetPreLaunchTime() time.Time {
	if m != nil {
		return m.PreLaunchTime
	}
	return time.Time{}
}

func (m *Plan) GetIncentivePlanParams() IncentivePlanParams {
	if m != nil {
		return m.IncentivePlanParams
	}
	return IncentivePlanParams{}
}

type IncentivePlanParams struct {
	// start_time_after_settlement is the time after IRO settlement when the
	// distribution of the remaining tokens as incentives will start
	StartTimeAfterSettlement time.Duration `protobuf:"bytes,1,opt,name=start_time_after_settlement,json=startTimeAfterSettlement,proto3,stdduration" json:"start_time_after_settlement"`
	// num_epochs_paid_over is the number of total epochs distribution will be
	// completed over
	NumEpochsPaidOver uint64 `protobuf:"varint,2,opt,name=num_epochs_paid_over,json=numEpochsPaidOver,proto3" json:"num_epochs_paid_over,omitempty"`
}

func (m *IncentivePlanParams) Reset()         { *m = IncentivePlanParams{} }
func (m *IncentivePlanParams) String() string { return proto.CompactTextString(m) }
func (*IncentivePlanParams) ProtoMessage()    {}
func (*IncentivePlanParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7d27cc6b5064d3f, []int{3}
}
func (m *IncentivePlanParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentivePlanParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentivePlanParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentivePlanParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentivePlanParams.Merge(m, src)
}
func (m *IncentivePlanParams) XXX_Size() int {
	return m.Size()
}
func (m *IncentivePlanParams) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentivePlanParams.DiscardUnknown(m)
}

var xxx_messageInfo_IncentivePlanParams proto.InternalMessageInfo

func (m *IncentivePlanParams) GetStartTimeAfterSettlement() time.Duration {
	if m != nil {
		return m.StartTimeAfterSettlement
	}
	return 0
}

func (m *IncentivePlanParams) GetNumEpochsPaidOver() uint64 {
	if m != nil {
		return m.NumEpochsPaidOver
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "dymensionxyz.dymension.iro.Params")
	proto.RegisterType((*BondingCurve)(nil), "dymensionxyz.dymension.iro.BondingCurve")
	proto.RegisterType((*Plan)(nil), "dymensionxyz.dymension.iro.Plan")
	proto.RegisterType((*IncentivePlanParams)(nil), "dymensionxyz.dymension.iro.IncentivePlanParams")
}

func init() {
	proto.RegisterFile("dymensionxyz/dymension/iro/iro.proto", fileDescriptor_e7d27cc6b5064d3f)
}

var fileDescriptor_e7d27cc6b5064d3f = []byte{
	// 750 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4f, 0x4f, 0x3b, 0x45,
	0x1c, 0xc6, 0xbb, 0xb5, 0x3f, 0x68, 0xa7, 0x45, 0x70, 0xc1, 0x64, 0xa9, 0xa1, 0x25, 0xd5, 0x18,
	0x2e, 0xec, 0x8a, 0x5c, 0xbd, 0xb4, 0x45, 0x92, 0x22, 0xff, 0x5c, 0x3c, 0x79, 0x99, 0xcc, 0xee,
	0x0c, 0x65, 0xc2, 0xce, 0xcc, 0x66, 0x76, 0xb6, 0x01, 0x5f, 0x05, 0x47, 0xcf, 0x1e, 0x3d, 0xfb,
	0x22, 0x38, 0x12, 0x4f, 0xc6, 0x44, 0x34, 0xf0, 0x46, 0xcc, 0xfc, 0x69, 0x6d, 0x50, 0x4c, 0xe8,
	0xef, 0xd0, 0xb4, 0x33, 0xdf, 0x79, 0x3e, 0x3b, 0xf3, 0x7d, 0xe6, 0xe9, 0x82, 0xcf, 0xf0, 0x2d,
	0x23, 0xbc, 0xa0, 0x82, 0xdf, 0xdc, 0xfe, 0x10, 0xcd, 0x06, 0x11, 0x95, 0x42, 0x7f, 0xc2, 0x5c,
	0x0a, 0x25, 0xfc, 0xf6, 0xfc, 0xaa, 0x70, 0x36, 0x08, 0xa9, 0x14, 0xed, 0x8d, 0xb1, 0x18, 0x0b,
	0xb3, 0x2c, 0xd2, 0xbf, 0xac, 0xa2, 0xdd, 0x1d, 0x0b, 0x31, 0xce, 0x48, 0x64, 0x46, 0x49, 0x79,
	0x19, 0x29, 0xca, 0x48, 0xa1, 0x10, 0xcb, 0xdd, 0x82, 0xce, 0xcb, 0x05, 0xb8, 0x94, 0x48, 0x69,
	0xa8, 0xab, 0xa7, 0xa2, 0x60, 0xa2, 0x88, 0x12, 0x54, 0x90, 0x68, 0xb2, 0x97, 0x10, 0x85, 0xf6,
	0xa2, 0x54, 0xd0, 0x69, 0x7d, 0xd3, 0xd6, 0xa1, 0x7d, 0xb2, 0x1d, 0xd8, 0x52, 0xef, 0xa7, 0x2a,
	0x58, 0x3a, 0x47, 0x12, 0xb1, 0xc2, 0xff, 0x06, 0x34, 0x14, 0xba, 0x26, 0x12, 0x5e, 0x12, 0x12,
	0x78, 0xdb, 0xde, 0x4e, 0x63, 0x10, 0xde, 0x3f, 0x76, 0x2b, 0xbf, 0x3f, 0x76, 0x3f, 0x1f, 0x53,
	0x75, 0x55, 0x26, 0x61, 0x2a, 0x98, 0x93, 0xbb, 0xaf, 0xdd, 0x02, 0x5f, 0x47, 0xea, 0x36, 0x27,
	0x45, 0x78, 0x40, 0xd2, 0xb8, 0x6e, 0x00, 0x87, 0x84, 0xf8, 0xdf, 0x82, 0x56, 0x2a, 0x89, 0xd9,
	0xa4, 0xe1, 0x55, 0xdf, 0xcc, 0x1b, 0x71, 0x15, 0x37, 0xa7, 0x0c, 0x8d, 0xbc, 0x01, 0x5b, 0x94,
	0xa7, 0x84, 0x2b, 0x3a, 0x21, 0x30, 0xcf, 0x10, 0x87, 0x8c, 0x72, 0xca, 0x4a, 0x06, 0x73, 0x73,
	0x80, 0xe0, 0x83, 0x6d, 0x6f, 0xa7, 0xf9, 0x65, 0x14, 0xbe, 0x6e, 0x40, 0x38, 0x9a, 0x02, 0xce,
	0x33, 0xc4, 0xed, 0xb9, 0x07, 0x35, 0xbd, 0xa9, 0xb8, 0x4d, 0xe7, 0x4b, 0x27, 0x96, 0x6c, 0x57,
	0xf4, 0xee, 0x3d, 0xd0, 0x1a, 0x08, 0x8e, 0x29, 0x1f, 0x0f, 0x4b, 0x39, 0x21, 0xfe, 0x57, 0xc0,
	0x3b, 0x59, 0xb0, 0x45, 0xde, 0x89, 0x56, 0x9f, 0x2e, 0xd0, 0x10, 0xa3, 0x3e, 0xd5, 0xea, 0xa1,
	0x39, 0xea, 0x02, 0xea, 0x61, 0xef, 0x8f, 0x77, 0xa0, 0xa6, 0x0f, 0xe8, 0x7f, 0x08, 0xaa, 0x14,
	0x9b, 0x33, 0xd4, 0xe2, 0x2a, 0xc5, 0xfe, 0x16, 0x00, 0x52, 0x64, 0x19, 0xca, 0x73, 0x48, 0xb1,
	0xdd, 0x5d, 0xdc, 0x70, 0x33, 0x23, 0xec, 0x1f, 0x02, 0x9f, 0x09, 0x5c, 0x66, 0x04, 0xa2, 0x34,
	0x85, 0x08, 0x63, 0x49, 0x8a, 0xc2, 0x6d, 0x23, 0xf8, 0xf5, 0x97, 0xdd, 0x0d, 0x77, 0xab, 0xfa,
	0xb6, 0x72, 0xa1, 0x24, 0xe5, 0xe3, 0x78, 0xcd, 0x6a, 0xfa, 0x69, 0xea, 0xe6, 0xfd, 0x23, 0xb0,
	0xa6, 0x84, 0x42, 0x19, 0x44, 0x59, 0x26, 0x52, 0xe3, 0x6d, 0x50, 0x33, 0xbe, 0x6d, 0x86, 0x0e,
	0xa1, 0x6f, 0x71, 0xe8, 0x6e, 0x71, 0x38, 0x14, 0x94, 0x3b, 0x87, 0x56, 0x8d, 0xb0, 0x3f, 0xd3,
	0xf9, 0x17, 0x60, 0x25, 0xb1, 0xae, 0xc0, 0x54, 0xdb, 0x12, 0xbc, 0x33, 0xa0, 0x9d, 0xff, 0xbb,
	0x00, 0xf3, 0x36, 0x3a, 0x6e, 0x2b, 0x99, 0xb7, 0xf6, 0x53, 0xb0, 0x52, 0x10, 0xa5, 0x32, 0x82,
	0x21, 0x26, 0x5c, 0xb0, 0x60, 0xc9, 0xb4, 0xa2, 0xe5, 0x26, 0x0f, 0xf4, 0x9c, 0x3f, 0x04, 0xa0,
	0x50, 0x48, 0x2a, 0xa8, 0x93, 0x1a, 0x2c, 0x9b, 0xc7, 0xb6, 0x43, 0x9b, 0xd2, 0x70, 0x9a, 0xd2,
	0xf0, 0xbb, 0x69, 0x8c, 0x07, 0x75, 0xfd, 0xa0, 0xbb, 0x3f, 0xbb, 0x5e, 0xdc, 0x30, 0x3a, 0x5d,
	0xf1, 0x8f, 0xc1, 0x6a, 0x2e, 0x09, 0xcc, 0x50, 0xc9, 0xd3, 0x2b, 0x4b, 0xaa, 0xbf, 0x81, 0xb4,
	0x92, 0x4b, 0x72, 0x6c, 0xb4, 0x86, 0x36, 0x02, 0xf5, 0x42, 0x64, 0x18, 0x22, 0xa6, 0x82, 0xc6,
	0x42, 0x61, 0x5b, 0xd6, 0xfa, 0x3e, 0x53, 0xfe, 0x19, 0x68, 0xa6, 0x19, 0xa2, 0x8c, 0x58, 0x1a,
	0x58, 0x88, 0x06, 0x1c, 0x42, 0x03, 0x29, 0xf8, 0xf8, 0x45, 0x72, 0x5d, 0x62, 0x9b, 0xef, 0x93,
	0xd8, 0x75, 0xfa, 0xef, 0x52, 0xef, 0x67, 0x0f, 0xac, 0xff, 0x87, 0xc4, 0x4f, 0xc0, 0x27, 0xff,
	0x38, 0x06, 0xd1, 0xa5, 0x22, 0x12, 0x5a, 0x4b, 0x19, 0xe1, 0xca, 0xe4, 0x40, 0x5f, 0xc1, 0x97,
	0x8d, 0x3f, 0x70, 0x7f, 0xb4, 0xb6, 0xef, 0x3f, 0xea, 0xbe, 0x07, 0x33, 0x07, 0xfb, 0x9a, 0x72,
	0x31, 0x83, 0xf8, 0x11, 0xd8, 0xe0, 0x25, 0x83, 0x24, 0x17, 0xe9, 0x55, 0x01, 0x73, 0x44, 0x31,
	0x14, 0x13, 0x22, 0x4d, 0x98, 0x6a, 0xf1, 0x47, 0xbc, 0x64, 0x5f, 0x9b, 0xd2, 0x39, 0xa2, 0xf8,
	0x6c, 0x42, 0xe4, 0xe0, 0xe8, 0xfe, 0xa9, 0xe3, 0x3d, 0x3c, 0x75, 0xbc, 0xbf, 0x9e, 0x3a, 0xde,
	0xdd, 0x73, 0xa7, 0xf2, 0xf0, 0xdc, 0xa9, 0xfc, 0xf6, 0xdc, 0xa9, 0x7c, 0xff, 0xc5, 0x5c, 0x97,
	0x5f, 0x79, 0xeb, 0x4c, 0xf6, 0xa3, 0x1b, 0xf3, 0xea, 0x31, 0x3d, 0x4f, 0x96, 0xcc, 0x9e, 0xf7,
	0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x72, 0x59, 0xf9, 0x30, 0xa5, 0x06, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IncentivePlanMinimumParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.CreationFee.Size()
		i -= size
		if _, err := m.CreationFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TakerFee.Size()
		i -= size
		if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *BondingCurve) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BondingCurve) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BondingCurve) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.C.Size()
		i -= size
		if _, err := m.C.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.N.Size()
		i -= size
		if _, err := m.N.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.M.Size()
		i -= size
		if _, err := m.M.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Plan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Plan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Plan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IncentivePlanParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.ClaimedAmt.Size()
		i -= size
		if _, err := m.ClaimedAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SoldAmt.Size()
		i -= size
		if _, err := m.SoldAmt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.PreLaunchTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PreLaunchTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintIro(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintIro(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	if len(m.SettledDenom) > 0 {
		i -= len(m.SettledDenom)
		copy(dAtA[i:], m.SettledDenom)
		i = encodeVarintIro(dAtA, i, uint64(len(m.SettledDenom)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.BondingCurve.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.TotalAllocation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintIro(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ModuleAccAddress) > 0 {
		i -= len(m.ModuleAccAddress)
		copy(dAtA[i:], m.ModuleAccAddress)
		i = encodeVarintIro(dAtA, i, uint64(len(m.ModuleAccAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RollappId) > 0 {
		i -= len(m.RollappId)
		copy(dAtA[i:], m.RollappId)
		i = encodeVarintIro(dAtA, i, uint64(len(m.RollappId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentivePlanParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentivePlanParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentivePlanParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumEpochsPaidOver != 0 {
		i = encodeVarintIro(dAtA, i, uint64(m.NumEpochsPaidOver))
		i--
		dAtA[i] = 0x10
	}
	n7, err7 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.StartTimeAfterSettlement, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement):])
	if err7 != nil {
		return 0, err7
	}
	i -= n7
	i = encodeVarintIro(dAtA, i, uint64(n7))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintIro(dAtA []byte, offset int, v uint64) int {
	offset -= sovIro(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TakerFee.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.CreationFee.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.IncentivePlanMinimumParams.Size()
	n += 1 + l + sovIro(uint64(l))
	return n
}

func (m *BondingCurve) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.M.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.N.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.C.Size()
	n += 1 + l + sovIro(uint64(l))
	return n
}

func (m *Plan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIro(uint64(m.Id))
	}
	l = len(m.RollappId)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = len(m.ModuleAccAddress)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = m.TotalAllocation.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.BondingCurve.Size()
	n += 1 + l + sovIro(uint64(l))
	l = len(m.SettledDenom)
	if l > 0 {
		n += 1 + l + sovIro(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovIro(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.PreLaunchTime)
	n += 1 + l + sovIro(uint64(l))
	l = m.SoldAmt.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.ClaimedAmt.Size()
	n += 1 + l + sovIro(uint64(l))
	l = m.IncentivePlanParams.Size()
	n += 1 + l + sovIro(uint64(l))
	return n
}

func (m *IncentivePlanParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.StartTimeAfterSettlement)
	n += 1 + l + sovIro(uint64(l))
	if m.NumEpochsPaidOver != 0 {
		n += 1 + sovIro(uint64(m.NumEpochsPaidOver))
	}
	return n
}

func sovIro(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIro(x uint64) (n int) {
	return sovIro(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CreationFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePlanMinimumParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivePlanMinimumParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BondingCurve) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BondingCurve: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BondingCurve: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field M", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.M.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.N.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field C", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.C.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Plan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Plan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Plan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RollappId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RollappId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAllocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAllocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondingCurve", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BondingCurve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettledDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SettledDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreLaunchTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.PreLaunchTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SoldAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimedAmt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClaimedAmt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivePlanParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IncentivePlanParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentivePlanParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIro
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentivePlanParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentivePlanParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTimeAfterSettlement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIro
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIro
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.StartTimeAfterSettlement, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumEpochsPaidOver", wireType)
			}
			m.NumEpochsPaidOver = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIro
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumEpochsPaidOver |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIro(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthIro
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIro(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIro
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIro
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIro
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIro
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIro
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIro        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIro          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIro = fmt.Errorf("proto: unexpected end of group")
)
